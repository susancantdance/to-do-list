(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),c=n(314),a=n.n(c)()(r());a.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}"],sourceRoot:""}]);const i=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&a[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},a=[],i=0;i<e.length;i++){var l=e[i],s=o.base?l[0]+o.base:l[0],d=c[s]||0,u="".concat(s," ").concat(d);c[s]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:A,references:1})}a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var i=n(c[a]);t[i].references--}for(var l=o(e,r),s=0;s<c.length;s++){var d=n(c[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{r:()=>I});var e=n(72),t=n.n(e),r=n(825),c=n.n(r),a=n(659),i=n.n(a),l=n(56),s=n.n(l),d=n(540),u=n.n(d),p=n(113),m=n.n(p),A=n(208),f={};function v(e,t,n="",o=0){return{title:e,currProjectName:t,description:n,index:o}}function g(e){let t=e,n=[];return console.log(`I created a project named ${e}`),h({title:t,list:n}),I(),{title:t,list:n}}function C(e,t){t.list=JSON.parse(localStorage.getItem(t.title)).slice(),e.currProjectName=t.title,e.index=t.list.length,t.list.push(e),console.log(`I added ${e.title} to ${t.title} the index is ${e.index} and title in array is ${t.list[e.index].title}`),h(t)}function h(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function y(e,t,n,o){return e.addEventListener("click",(()=>{console.log(`addEventListener (${e}, ${n})`),function(e,t,n,o){console.log(`editMode (${t.textContent}, ${n}, ${o})`);const r=JSON.parse(localStorage.getItem(n)).slice(),c=document.querySelector(".todos"),a=document.createElement("span"),i=document.createElement("INPUT"),l=document.createElement("INPUT"),s=document.createElement("SELECT"),d=document.createElement("button");i.value=t.textContent,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Title"),i.setAttribute("class","titleInput"),l.value=r[o].description,l.setAttribute("type","text"),l.setAttribute("placeholder","Add Description"),l.setAttribute("class","descInput"),s.setAttribute("type","select-one"),Object.keys(localStorage).forEach((e=>{let t=document.createElement("option");t.textContent=e,s.add(t)})),s.value=n,d.setAttribute("type","button"),d.textContent="Save",d.addEventListener("click",(()=>{console.log(`now we create a todo using these params (${i.value} ${n} ${l.value})`);let e=v(i.value,n,l.value,o),t={title:s.value,list:JSON.parse(localStorage.getItem(s.value))};console.log(`updatedTodo title ${e.title} currProjName ${e.currProjectName} desc ${e.description}`),s.value!==n?function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),function(e,t){t.list.splice(e.index,1),h(t)}(e,n),C(e,t)}(e,t):function(e){console.log(`editTodo (${e.title},${e.currProjectName},${e.description},${e.index})`);let t=JSON.parse(localStorage.getItem(e.currProjectName)).slice(),n=e.index;t[n].title=e.title,t[n].description=e.description,t[n].currProjectName=e.currProjectName,h({title:e.currProjectName,list:t})}(e),b(n)})),a.appendChild(i),a.appendChild(l),a.appendChild(s),a.appendChild(d);const u=document.createElement("li");u.appendChild(a),c.replaceChild(u,e)}(e,t,n,o)})),console.log(e),e}function b(e){let t=JSON.parse(localStorage.getItem(e)).slice();document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e,document.querySelector(".todos").textContent="";const n=document.querySelector(".todos");for(let o=0;o<t.length;o++){const r=document.createElement("li"),c=document.createElement("span"),a=document.createElement("span"),i=document.createElement("span");c.textContent=t[o].title,a.textContent=t[o].description,i.textContent=": ",r.appendChild(c),r.appendChild(i),r.appendChild(a);const l=y(r,c,e,o);n.appendChild(l)}}function I(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li");n.textContent=t,n.addEventListener("click",(()=>{b(t)})),e.appendChild(n)}))}f.styleTagTransform=m(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=c(),f.insertStyleElement=u(),t()(A.A,f),A.A&&A.A.locals&&A.A.locals,g("Inbox"),function(){const e=document.querySelector(".addtodo"),t=document.querySelector("#name");e.addEventListener("click",(()=>{const e=document.querySelector(".projnamespan");console.log(`listen function ${e.textContent}`);const n={title:e.textContent,list:JSON.parse(localStorage.getItem(e.textContent)).slice()};C(v(t.value),n),t.value="",b(n.title)}))}(),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{g(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoid0ZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksd2hCQXlDckMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkJBQTZCLE1BQVEsR0FBRyxTQUFXLDhRQUE4USxlQUFpQixDQUFDLHloQkFBeWhCLFdBQWEsTUFFeDVCLFMsVUMxQ0FELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQTRFWCxPQXpFQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxPQUErQixJQUFaRixFQUFLLEdBb0I1QixPQW5CSUEsRUFBSyxLQUNQQyxHQUFXLGNBQWNFLE9BQU9ILEVBQUssR0FBSSxRQUV2Q0EsRUFBSyxLQUNQQyxHQUFXLFVBQVVFLE9BQU9ILEVBQUssR0FBSSxPQUVuQ0UsSUFDRkQsR0FBVyxTQUFTRSxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxPQUU1RUMsR0FBV04sRUFBdUJLLEdBQzlCRSxJQUNGRCxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVURCxFQUFLLEtBQ1BDLEdBQVcsS0FFTkEsQ0FDVCxJQUFHSSxLQUFLLEdBQ1YsRUFHQVQsRUFBS1UsRUFBSSxTQUFXQyxFQUFTQyxFQUFPQyxFQUFRQyxFQUFVQyxHQUM3QixpQkFBWkosSUFDVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsT0FBU0ssS0FFN0IsSUFBSUMsRUFBeUIsQ0FBQyxFQUM5QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJaEIsS0FBS00sT0FBUVUsSUFBSyxDQUNwQyxJQUFJckIsRUFBS0ssS0FBS2dCLEdBQUcsR0FDUCxNQUFOckIsSUFDRm9CLEVBQXVCcEIsSUFBTSxFQUVqQyxDQUVGLElBQUssSUFBSXNCLEVBQUssRUFBR0EsRUFBS1IsRUFBUUgsT0FBUVcsSUFBTSxDQUMxQyxJQUFJZixFQUFPLEdBQUdHLE9BQU9JLEVBQVFRLElBQ3pCTixHQUFVSSxFQUF1QmIsRUFBSyxXQUdyQixJQUFWVyxTQUNjLElBQVpYLEVBQUssS0FHZEEsRUFBSyxHQUFLLFNBQVNHLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxNQUYvRkEsRUFBSyxHQUFLVyxHQU1WSCxJQUNHUixFQUFLLElBR1JBLEVBQUssR0FBSyxVQUFVRyxPQUFPSCxFQUFLLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLEtBQzFEQSxFQUFLLEdBQUtRLEdBSFZSLEVBQUssR0FBS1EsR0FNVkUsSUFDR1YsRUFBSyxJQUdSQSxFQUFLLEdBQUssY0FBY0csT0FBT0gsRUFBSyxHQUFJLE9BQU9HLE9BQU9ILEVBQUssR0FBSSxLQUMvREEsRUFBSyxHQUFLVSxHQUhWVixFQUFLLEdBQUssR0FBR0csT0FBT08sSUFNeEJkLEVBQUtMLEtBQUtTLEdBQ1osQ0FDRixFQUNPSixDQUNULEMsVUNsRkFKLEVBQU9FLFFBQVUsU0FBVU0sR0FDekIsSUFBSUMsRUFBVUQsRUFBSyxHQUNmZ0IsRUFBYWhCLEVBQUssR0FDdEIsSUFBS2dCLEVBQ0gsT0FBT2YsRUFFVCxHQUFvQixtQkFBVGdCLEtBQXFCLENBQzlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEcEIsT0FBT2UsR0FDN0VNLEVBQWdCLE9BQU9yQixPQUFPb0IsRUFBTSxPQUN4QyxNQUFPLENBQUN0QixHQUFTRSxPQUFPLENBQUNxQixJQUFnQm5CLEtBQUssS0FDaEQsQ0FDQSxNQUFPLENBQUNKLEdBQVNJLEtBQUssS0FDeEIsQyxTQ2JBLElBQUlvQixFQUFjLEdBQ2xCLFNBQVNDLEVBQXFCQyxHQUU1QixJQURBLElBQUlDLEdBQVUsRUFDTHRCLEVBQUksRUFBR0EsRUFBSW1CLEVBQVlyQixPQUFRRSxJQUN0QyxHQUFJbUIsRUFBWW5CLEdBQUdxQixhQUFlQSxFQUFZLENBQzVDQyxFQUFTdEIsRUFDVCxLQUNGLENBRUYsT0FBT3NCLENBQ1QsQ0FDQSxTQUFTQyxFQUFhakMsRUFBTWtDLEdBRzFCLElBRkEsSUFBSUMsRUFBYSxDQUFDLEVBQ2RDLEVBQWMsR0FDVDFCLEVBQUksRUFBR0EsRUFBSVYsRUFBS1EsT0FBUUUsSUFBSyxDQUNwQyxJQUFJTixFQUFPSixFQUFLVSxHQUNaYixFQUFLcUMsRUFBUUcsS0FBT2pDLEVBQUssR0FBSzhCLEVBQVFHLEtBQU9qQyxFQUFLLEdBQ2xEa0MsRUFBUUgsRUFBV3RDLElBQU8sRUFDMUJrQyxFQUFhLEdBQUd4QixPQUFPVixFQUFJLEtBQUtVLE9BQU8rQixHQUMzQ0gsRUFBV3RDLEdBQU15QyxFQUFRLEVBQ3pCLElBQUlDLEVBQW9CVCxFQUFxQkMsR0FDekNTLEVBQU0sQ0FDUkMsSUFBS3JDLEVBQUssR0FDVlEsTUFBT1IsRUFBSyxHQUNac0MsVUFBV3RDLEVBQUssR0FDaEJVLFNBQVVWLEVBQUssR0FDZlcsTUFBT1gsRUFBSyxJQUVkLElBQTJCLElBQXZCbUMsRUFDRlYsRUFBWVUsR0FBbUJJLGFBQy9CZCxFQUFZVSxHQUFtQkssUUFBUUosT0FDbEMsQ0FDTCxJQUFJSSxFQUFVQyxFQUFnQkwsRUFBS04sR0FDbkNBLEVBQVFZLFFBQVVwQyxFQUNsQm1CLEVBQVlrQixPQUFPckMsRUFBRyxFQUFHLENBQ3ZCcUIsV0FBWUEsRUFDWmEsUUFBU0EsRUFDVEQsV0FBWSxHQUVoQixDQUNBUCxFQUFZekMsS0FBS29DLEVBQ25CLENBQ0EsT0FBT0ssQ0FDVCxDQUNBLFNBQVNTLEVBQWdCTCxFQUFLTixHQUM1QixJQUFJYyxFQUFNZCxFQUFRZSxPQUFPZixHQVl6QixPQVhBYyxFQUFJRSxPQUFPVixHQUNHLFNBQWlCVyxHQUM3QixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBT1YsTUFBUUQsRUFBSUMsS0FBT1UsRUFBT3ZDLFFBQVU0QixFQUFJNUIsT0FBU3VDLEVBQU9ULFlBQWNGLEVBQUlFLFdBQWFTLEVBQU9yQyxXQUFhMEIsRUFBSTFCLFVBQVlxQyxFQUFPcEMsUUFBVXlCLEVBQUl6QixNQUN6SixPQUVGaUMsRUFBSUUsT0FBT1YsRUFBTVcsRUFDbkIsTUFDRUgsRUFBSUksUUFFUixDQUVGLENBQ0F4RCxFQUFPRSxRQUFVLFNBQVVFLEVBQU1rQyxHQUcvQixJQUFJbUIsRUFBa0JwQixFQUR0QmpDLEVBQU9BLEdBQVEsR0FEZmtDLEVBQVVBLEdBQVcsQ0FBQyxHQUd0QixPQUFPLFNBQWdCb0IsR0FDckJBLEVBQVVBLEdBQVcsR0FDckIsSUFBSyxJQUFJNUMsRUFBSSxFQUFHQSxFQUFJMkMsRUFBZ0I3QyxPQUFRRSxJQUFLLENBQy9DLElBQ0k2QyxFQUFRekIsRUFES3VCLEVBQWdCM0MsSUFFakNtQixFQUFZMEIsR0FBT1osWUFDckIsQ0FFQSxJQURBLElBQUlhLEVBQXFCdkIsRUFBYXFCLEVBQVNwQixHQUN0Q3VCLEVBQUssRUFBR0EsRUFBS0osRUFBZ0I3QyxPQUFRaUQsSUFBTSxDQUNsRCxJQUNJQyxFQUFTNUIsRUFES3VCLEVBQWdCSSxJQUVLLElBQW5DNUIsRUFBWTZCLEdBQVFmLGFBQ3RCZCxFQUFZNkIsR0FBUWQsVUFDcEJmLEVBQVlrQixPQUFPVyxFQUFRLEdBRS9CLENBQ0FMLEVBQWtCRyxDQUNwQixDQUNGLEMsVUNqRkEsSUFBSUcsRUFBTyxDQUFDLEVBK0JaL0QsRUFBT0UsUUFQUCxTQUEwQjhELEVBQVFDLEdBQ2hDLElBQUlDLEVBdEJOLFNBQW1CQSxHQUNqQixRQUE0QixJQUFqQkgsRUFBS0csR0FBeUIsQ0FDdkMsSUFBSUMsRUFBY0MsU0FBU0MsY0FBY0gsR0FHekMsR0FBSUksT0FBT0MsbUJBQXFCSixhQUF1QkcsT0FBT0Msa0JBQzVELElBR0VKLEVBQWNBLEVBQVlLLGdCQUFnQkMsSUFDNUMsQ0FBRSxNQUFPQyxHQUVQUCxFQUFjLElBQ2hCLENBRUZKLEVBQUtHLEdBQVVDLENBQ2pCLENBQ0EsT0FBT0osRUFBS0csRUFDZCxDQUllUyxDQUFVWCxHQUN2QixJQUFLRSxFQUNILE1BQU0sSUFBSVUsTUFBTSwyR0FFbEJWLEVBQU9XLFlBQVlaLEVBQ3JCLEMsVUN2QkFqRSxFQUFPRSxRQU5QLFNBQTRCb0MsR0FDMUIsSUFBSXdDLEVBQVVWLFNBQVNXLGNBQWMsU0FHckMsT0FGQXpDLEVBQVEwQyxjQUFjRixFQUFTeEMsRUFBUTJDLFlBQ3ZDM0MsRUFBUTBCLE9BQU9jLEVBQVN4QyxFQUFRQSxTQUN6QndDLENBQ1QsQyxlQ0NBOUUsRUFBT0UsUUFOUCxTQUF3Q2dGLEdBQ3RDLElBQUlDLEVBQW1ELEtBQ25EQSxHQUNGRCxFQUFhRSxhQUFhLFFBQVNELEVBRXZDLEMsVUNvREFuRixFQUFPRSxRQWpCUCxTQUFnQm9DLEdBQ2QsR0FBd0Isb0JBQWI4QixTQUNULE1BQU8sQ0FDTGQsT0FBUSxXQUFtQixFQUMzQkUsT0FBUSxXQUFtQixHQUcvQixJQUFJMEIsRUFBZTVDLEVBQVErQyxtQkFBbUIvQyxHQUM5QyxNQUFPLENBQ0xnQixPQUFRLFNBQWdCVixJQWpENUIsU0FBZXNDLEVBQWM1QyxFQUFTTSxHQUNwQyxJQUFJQyxFQUFNLEdBQ05ELEVBQUkxQixXQUNOMkIsR0FBTyxjQUFjbEMsT0FBT2lDLEVBQUkxQixTQUFVLFFBRXhDMEIsRUFBSTVCLFFBQ042QixHQUFPLFVBQVVsQyxPQUFPaUMsRUFBSTVCLE1BQU8sT0FFckMsSUFBSU4sT0FBaUMsSUFBZGtDLEVBQUl6QixNQUN2QlQsSUFDRm1DLEdBQU8sU0FBU2xDLE9BQU9pQyxFQUFJekIsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU9pQyxFQUFJekIsT0FBUyxHQUFJLE9BRTVFMEIsR0FBT0QsRUFBSUMsSUFDUG5DLElBQ0ZtQyxHQUFPLEtBRUxELEVBQUk1QixRQUNONkIsR0FBTyxLQUVMRCxFQUFJMUIsV0FDTjJCLEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVRyQixPQUN0Qm9CLEdBQU8sdURBQXVEbEMsT0FBT2MsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVZ0IsTUFBZSxRQUt0SVIsRUFBUWdELGtCQUFrQnpDLEVBQUtxQyxFQUFjNUMsRUFBUUEsUUFDdkQsQ0FvQk1pRCxDQUFNTCxFQUFjNUMsRUFBU00sRUFDL0IsRUFDQVksT0FBUSxZQXJCWixTQUE0QjBCLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhTSxXQUNmLE9BQU8sRUFFVE4sRUFBYU0sV0FBV0MsWUFBWVAsRUFDdEMsQ0FnQk1RLENBQW1CUixFQUNyQixFQUVKLEMsVUM5Q0FsRixFQUFPRSxRQVZQLFNBQTJCMkMsRUFBS3FDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUvQyxNQUM3QixDQUNMLEtBQU9xQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFFeENYLEVBQWFMLFlBQVlULFNBQVMwQixlQUFlakQsR0FDbkQsQ0FDRixDLEdDWElrRCxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUI3RSxJQUFqQjhFLEVBQ0gsT0FBT0EsRUFBYWhHLFFBR3JCLElBQUlGLEVBQVMrRixFQUF5QkUsR0FBWSxDQUNqRGhHLEdBQUlnRyxFQUVKL0YsUUFBUyxDQUFDLEdBT1gsT0FIQWlHLEVBQW9CRixHQUFVakcsRUFBUUEsRUFBT0UsUUFBUzhGLEdBRy9DaEcsRUFBT0UsT0FDZixDQ3JCQThGLEVBQW9CSSxFQUFLcEcsSUFDeEIsSUFBSXFHLEVBQVNyRyxHQUFVQSxFQUFPc0csV0FDN0IsSUFBT3RHLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBZ0csRUFBb0JPLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLENBQU0sRUNMZEwsRUFBb0JPLEVBQUksQ0FBQ3JHLEVBQVN1RyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hULEVBQW9CVyxFQUFFRixFQUFZQyxLQUFTVixFQUFvQlcsRUFBRXpHLEVBQVN3RyxJQUM1RUUsT0FBT0MsZUFBZTNHLEVBQVN3RyxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsSUFFMUUsRUNORFYsRUFBb0JXLEVBQUksQ0FBQy9ELEVBQUtvRSxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLdkUsRUFBS29FLEdDQWxGaEIsRUFBb0JvQixRQUFLaEcsRSx1SkNXckJrQixFQUFVLENBQUMsRUNQZixTQUFTK0UsRUFBV0MsRUFBT0MsRUFBaUJDLEVBQWMsR0FBSTdELEVBQVEsR0FFbEUsTUFBTyxDQUFDMkQsUUFBT0Msa0JBQWlCQyxjQUFhN0QsUUFDakQsQ0FxQ0EsU0FBUzhELEVBQWNDLEdBQ25CLElBQUlKLEVBQVFJLEVBQ1J0SCxFQUFPLEdBSVgsT0FIQXVILFFBQVFDLElBQUksNkJBQTZCRixLQUN6Q0csRUFBWSxDQUFDUCxRQUFPbEgsU0FDcEIwSCxJQUNPLENBQUNSLFFBQU9sSCxPQUNuQixDQUlBLFNBQVMySCxFQUFhQyxFQUFLQyxHQUN2QkEsRUFBSzdILEtBQU95QixLQUFLcUcsTUFBTUMsYUFBYUMsUUFBUUgsRUFBS1gsUUFBUWUsUUFDekRMLEVBQUtULGdCQUFrQlUsRUFBS1gsTUFDNUJVLEVBQUtyRSxNQUFRc0UsRUFBSzdILEtBQUtRLE9BQ3ZCcUgsRUFBSzdILEtBQUtMLEtBQUtpSSxHQUNmTCxRQUFRQyxJQUFJLFdBQVdJLEVBQUtWLFlBQVlXLEVBQUtYLHNCQUFzQlUsRUFBS3JFLCtCQUErQnNFLEVBQUs3SCxLQUFLNEgsRUFBS3JFLE9BQU8yRCxTQUM3SE8sRUFBWUksRUFDaEIsQ0FjQSxTQUFTSixFQUFZUyxHQUNqQlgsUUFBUUMsSUFBSSxvREFBb0RVLEVBQVFoQixxQkFBcUJnQixFQUFRbEksUUFDckcrSCxhQUFhSSxRQUFRRCxFQUFRaEIsTUFBT3pGLEtBQUtDLFVBQVV3RyxFQUFRbEksTUFDL0QsQ0MzQ0EsU0FBU29JLEVBQVlDLEVBQWNDLEVBQWlCQyxFQUFXN0gsR0FXM0QsT0FUQTJILEVBQWFHLGlCQUFpQixTQUFTLEtBR25DakIsUUFBUUMsSUFBSSxxQkFBcUJhLE1BQWlCRSxNQVkxRCxTQUFrQkYsRUFBY0ksRUFBVUYsRUFBVzdILEdBQ2pENkcsUUFBUUMsSUFBSSxhQUFhaUIsRUFBU0MsZ0JBQWdCSCxNQUFjN0gsTUFHaEUsTUFBTWlJLEVBQWNsSCxLQUFLcUcsTUFBTUMsYUFBYUMsUUFBUU8sSUFBWU4sUUFFMURqSSxFQUFPZ0UsU0FBU0MsY0FBYyxVQUM5QjJFLEVBQWU1RSxTQUFTVyxjQUFjLFFBQ3RDa0UsRUFBWTdFLFNBQVNXLGNBQWMsU0FDbkNtRSxFQUFrQjlFLFNBQVNXLGNBQWMsU0FDekNvRSxFQUFrQi9FLFNBQVNXLGNBQWMsVUFDekNxRSxFQUFhaEYsU0FBU1csY0FBYyxVQUUxQ2tFLEVBQVVJLE1BQVFSLEVBQVNDLFlBQzNCRyxFQUFVN0QsYUFBYSxPQUFPLFFBQzlCNkQsRUFBVTdELGFBQWEsY0FBYyxhQUNyQzZELEVBQVU3RCxhQUFhLFFBQVEsY0FFL0I4RCxFQUFnQkcsTUFBUU4sRUFBWWpJLEdBQUcwRyxZQUN2QzBCLEVBQWdCOUQsYUFBYSxPQUFPLFFBQ3BDOEQsRUFBZ0I5RCxhQUFhLGNBQWMsbUJBQzNDOEQsRUFBZ0I5RCxhQUFhLFFBQVEsYUFFckMrRCxFQUFnQi9ELGFBQWEsT0FBTyxjQUVwQ3dCLE9BQU8wQyxLQUFLbkIsY0FBY29CLFNBQVU3QyxJQUVoQyxJQUFJOEMsRUFBU3BGLFNBQVNXLGNBQWMsVUFDcEN5RSxFQUFPVixZQUFjcEMsRUFDckJ5QyxFQUFnQk0sSUFBSUQsRUFBTyxJQUcvQkwsRUFBZ0JFLE1BQVFWLEVBRXhCUyxFQUFXaEUsYUFBYSxPQUFPLFVBQy9CZ0UsRUFBV04sWUFBYyxPQUN6Qk0sRUFBV1IsaUJBQWlCLFNBQVMsS0FDakNqQixRQUFRQyxJQUFJLDRDQUE0Q3FCLEVBQVVJLFNBQVNWLEtBQWFPLEVBQWdCRyxVQUN4RyxJQUFJSyxFQUFjckMsRUFBVzRCLEVBQVVJLE1BQU9WLEVBQVdPLEVBQWdCRyxNQUFPdkksR0FDNUU2SSxFQUFpQixDQUFDLE1BQVFSLEVBQWdCRSxNQUFNLEtBQU94SCxLQUFLcUcsTUFBTUMsYUFBYUMsUUFBUWUsRUFBZ0JFLFNBRTNHMUIsUUFBUUMsSUFBSSxxQkFBcUI4QixFQUFZcEMsc0JBQXNCb0MsRUFBWW5DLHdCQUF3Qm1DLEVBQVlsQyxlQUUvRzJCLEVBQWdCRSxRQUFVVixFRDlCdEMsU0FBdUJYLEVBQUs0QixHQUN4QixJQUFJQyxFQUFhLENBQUMsTUFBUTdCLEVBQUtULGdCQUFnQixLQUFPMUYsS0FBS3FHLE1BQU1DLGFBQWFDLFFBQVFKLEVBQUtULG1CQUMzRkksUUFBUUMsSUFBSSx1Q0FBdUNpQyxFQUFXdkMsU0F6RGxFLFNBQW9CVSxFQUFLTSxHQU1yQkEsRUFBUWxJLEtBQUsrQyxPQUFPNkUsRUFBS3JFLE1BQU0sR0FDL0JrRSxFQUFZUyxFQUVoQixDQWlESXdCLENBQVc5QixFQUFLNkIsR0FDaEI5QixFQUFhQyxFQUFLNEIsRUFFdEIsQ0N3QmlERyxDQUFjTCxFQUFhQyxHRFo1RSxTQUFrQjNCLEdBQ2RMLFFBQVFDLElBQUksYUFBYUksRUFBS1YsU0FBU1UsRUFBS1QsbUJBQW1CUyxFQUFLUixlQUFlUSxFQUFLckUsVUFHeEYsSUFBSUQsRUFBVTdCLEtBQUtxRyxNQUFNQyxhQUFhQyxRQUFRSixFQUFLVCxrQkFBa0JjLFFBQ2pFdkgsRUFBSWtILEVBQUtyRSxNQUNiRCxFQUFRNUMsR0FBR3dHLE1BQVFVLEVBQUtWLE1BQ3hCNUQsRUFBUTVDLEdBQUcwRyxZQUFjUSxFQUFLUixZQUM5QjlELEVBQVE1QyxHQUFHeUcsZ0JBQWtCUyxFQUFLVCxnQkFHbENNLEVBRHFCLENBQUMsTUFBUUcsRUFBS1QsZ0JBQWdCLEtBQU83RCxHQUU5RCxDQ0Nhc0csQ0FBU04sR0FFZE8sRUFBWXRCLEVBQVUsSUFLMUJLLEVBQWFuRSxZQUFZb0UsR0FDekJELEVBQWFuRSxZQUFZcUUsR0FDekJGLEVBQWFuRSxZQUFZc0UsR0FDekJILEVBQWFuRSxZQUFZdUUsR0FFekIsTUFBTWMsRUFBZTlGLFNBQVNXLGNBQWMsTUFDNUNtRixFQUFhckYsWUFBWW1FLEdBRXpCNUksRUFBSytKLGFBQWFELEVBQWF6QixFQUVuQyxDQXZFUTJCLENBQVMzQixFQUFjQyxFQUFpQkMsRUFBVzdILEVBQUUsSUFHekQ2RyxRQUFRQyxJQUFJYSxHQUNMQSxDQUVYLENBcUVBLFNBQVN3QixFQUFZdEIsR0FFakIsSUFBSTBCLEVBQVd4SSxLQUFLcUcsTUFBTUMsYUFBYUMsUUFBUU8sSUFBWU4sUUFFM0RqRSxTQUFTQyxjQUFjLGlCQUFpQnlFLFlBQWMsR0FDdEQxRSxTQUFTQyxjQUFjLGlCQUFpQnlFLFlBQWNILEVBQ3REdkUsU0FBU0MsY0FBYyxVQUFVeUUsWUFBYyxHQUMvQyxNQUFNMUksRUFBT2dFLFNBQVNDLGNBQWMsVUFFcEMsSUFBSSxJQUFJdkQsRUFBSSxFQUFHQSxFQUFFdUosRUFBU3pKLE9BQVFFLElBQUksQ0FDbEMsTUFBTXdKLEVBQWNsRyxTQUFTVyxjQUFjLE1BRXJDMkQsRUFBa0J0RSxTQUFTVyxjQUFjLFFBQ3pDd0YsRUFBa0JuRyxTQUFTVyxjQUFjLFFBQ3pDeUYsRUFBZXBHLFNBQVNXLGNBQWMsUUFDNUMyRCxFQUFnQkksWUFBY3VCLEVBQVN2SixHQUFHd0csTUFDMUNpRCxFQUFnQnpCLFlBQWN1QixFQUFTdkosR0FBRzBHLFlBQzFDZ0QsRUFBYTFCLFlBQWMsS0FDM0J3QixFQUFZekYsWUFBWTZELEdBQ3hCNEIsRUFBWXpGLFlBQVkyRixHQUN4QkYsRUFBWXpGLFlBQVkwRixHQUN4QixNQUFNRSxFQUEwQmpDLEVBQVk4QixFQUFhNUIsRUFBaUJDLEVBQVc3SCxHQUNyRlYsRUFBS3lFLFlBQVk0RixFQUNyQixDQUVKLENBR0EsU0FBUzNDLElBRUwsTUFBTXVDLEVBQVdqRyxTQUFTQyxjQUFjLGFBQ3hDZ0csRUFBU0ssVUFBWSxHQUVyQjlELE9BQU8wQyxLQUFLbkIsY0FBY29CLFNBQVU3QyxJQUNoQyxNQUFNaUUsRUFBSXZHLFNBQVNXLGNBQWMsTUFDakM0RixFQUFFN0IsWUFBY3BDLEVBQ2hCaUUsRUFBRS9CLGlCQUFpQixTQUFTLEtBQ3hCcUIsRUFBWXZELEVBQUksSUFFcEIyRCxFQUFTeEYsWUFBWThGLEVBQUUsR0FHL0IsQ0ZuSkFySSxFQUFRZ0Qsa0JBQW9CLElBQzVCaEQsRUFBUTBDLGNBQWdCLElBQ3hCMUMsRUFBUTBCLE9BQVMsU0FBYyxLQUFNLFFBQ3JDMUIsRUFBUWUsT0FBUyxJQUNqQmYsRUFBUStDLG1CQUFxQixJQUVoQixJQUFJLElBQVMvQyxHQUtKLEtBQVcsSUFBUXNJLFFBQVMsSUFBUUEsT0UySTFEbkQsRUFBYyxTQTNKZCxXQUNJLE1BQU1vRCxFQUFZekcsU0FBU0MsY0FBYyxZQUNuQ3lHLEVBQVcxRyxTQUFTQyxjQUFjLFNBRXhDd0csRUFBVWpDLGlCQUFpQixTQUFTLEtBQ2hDLE1BQU1tQyxFQUFlM0csU0FBU0MsY0FBYyxpQkFDNUNzRCxRQUFRQyxJQUFJLG1CQUFtQm1ELEVBQWFqQyxlQUM1QyxNQUFNUixFQUFVLENBQUMsTUFBUXlDLEVBQWFqQyxZQUFhLEtBQU9qSCxLQUFLcUcsTUFBTUMsYUFBYUMsUUFBUTJDLEVBQWFqQyxjQUFjVCxTQUNySE4sRUFBYVYsRUFBV3lELEVBQVN6QixPQUFPZixHQUN4Q3dDLEVBQVN6QixNQUFRLEdBQ2pCWSxFQUFZM0IsRUFBUWhCLE1BQU0sR0FFbEMsQ0FnSkEwRCxHQTdJQSxXQUNJLE1BQU1DLEVBQWdCN0csU0FBU0MsY0FBYyxtQkFDdkM2RyxFQUFlOUcsU0FBU0MsY0FBYyxnQkFFNUM0RyxFQUFjckMsaUJBQWlCLFNBQVMsS0FDcENuQixFQUFjeUQsRUFBYTdCLE9BQzNCNkIsRUFBYTdCLE1BQVEsRUFBRSxHQUcvQixDQXFJQThCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwJSA3MCU7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMDAlO1xufVxuXG4ubWFpbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcbn1cblxuLnNpZGVuYXYge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHBpbms7XG59XG5cbi50aXRsZSB7XG4gICAgZm9udC1zaXplOiAzMHB4O1xufVxuXG4uZW50cnkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJlaWdlO1xufVxuXG4uZGlzcGxheWFyZWEge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTUsIDE3OSwgMjQ5KTtcbn1cblxuLnByb2psaXN0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ29sZGVucm9kO1xufVxuXG5saSB7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xufVxuXG4udGl0bGVJbnB1dCB7XG4gICAgd2lkdGg6IDc1cHg7XG59XG5cbi5kZXNjSW5wdXQge1xuICAgIHdpZHRoOiAxNTBweDtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxvQ0FBb0M7QUFDeEM7O0FBRUE7SUFDSSwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksWUFBWTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzMCUgNzAlO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XFxufVxcblxcbi5tYWluIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcXG59XFxuXFxuLnNpZGVuYXYge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBwaW5rO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgICBmb250LXNpemU6IDMwcHg7XFxufVxcblxcbi5lbnRyeSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJlaWdlO1xcbn1cXG5cXG4uZGlzcGxheWFyZWEge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjE1LCAxNzksIDI0OSk7XFxufVxcblxcbi5wcm9qbGlzdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtnb2xkZW5yb2Q7XFxufVxcblxcbmxpIHtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiBibGFjaztcXG59XFxuXFxuLnRpdGxlSW5wdXQge1xcbiAgICB3aWR0aDogNzVweDtcXG59XFxuXFxuLmRlc2NJbnB1dCB7XFxuICAgIHdpZHRoOiAxNTBweDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIgaW1wb3J0IHtkaXNwbGF5UHJvamVjdHN9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbi8vY3JlYXRlIGEgbmV3IHRvZG8gb2JqZWN0XG4vL3BhcmFtczogKHRpdGxlIG9mIHRvZG8sY3VycmVudCBwcm9qZWN0IG5hbWUsIGRlc2NyaXB0aW9uLCBkdWVkYXRlKVxuZnVuY3Rpb24gY3JlYXRlVG9kbyh0aXRsZSwgY3VyclByb2plY3ROYW1lLCBkZXNjcmlwdGlvbiA9ICcnLCBpbmRleCA9IDApIHtcbiAgICBcbiAgICByZXR1cm4ge3RpdGxlLCBjdXJyUHJvamVjdE5hbWUsIGRlc2NyaXB0aW9uLCBpbmRleH07XG59XG5cbi8vcmVtb3ZlIGEgdG9kbyBvYmplY3QgZnJvbSBhIHByb2plY3Qgb2JqZWN0XG4vL3BhcmFtczogKHRvZG8gb2JqZWN0LCBwcm9qZWN0IG9iamVjdClcbmZ1bmN0aW9uIGRlbGV0ZVRvZG8odG9kbyxwcm9qZWN0KXtcbiAgICAvL2NvbnNvbGUubG9nKGBJbiBEZWxldGVUb2RvIGFuZCBwcm9qZWN0IHRpdGxlIGlzICR7cHJvai50aXRsZX0gYW5kIHRvZG8gaXMgJHt0b2RvLnRpdGxlfWApO1xuICAgIC8vY29uc29sZS5sb2coSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qLnRpdGxlKSkpO1xuICAgIC8vIGxldCBzZWFyY2hSZXN1bHRzID0gbG9va3VwVG9kbyh0b2RvLnRpdGxlLCBwcm9qZWN0LnRpdGxlKTtcbiAgICAvLyBzZWFyY2hSZXN1bHRzLnNlYXJjaFRvZG9zLnNwbGljZShzZWFyY2hSZXN1bHRzLmksMSk7XG4gICAgLy8gcHJvamVjdC5saXN0ID0gc2VhcmNoUmVzdWx0cy5zZWFyY2hUb2Rvcy5zbGljZSgpO1xuICAgIHByb2plY3QubGlzdC5zcGxpY2UodG9kby5pbmRleCwxKTtcbiAgICBzYXZlVG9Mb2NhbChwcm9qZWN0KTtcblxufVxuXG4vL0ZpbmQgYSBzcGVjaWZpYyB0b2RvIGluIHRoZSBwcm9qZWN0IG9iamVjdCBsaXN0IHRvIG1hbmlwdWxhdGUgZnVydGhlclxuLy9wYXJhbXM6ICh0b2RvIHRpdGxlLCBwcm9qZWN0IHRpdGxlKVxuLy9yZXR1cm5zOiBhIG5ldyBvYmplY3QgdGhhdCBoYXMgdGhlIGxpc3QgJiB0aGUgaW5kZXggb2YgdG9kbyBpbiBxdWVzdGlvbiAoRE8gSSBORUVEIFRPIFJFVFVSTiBUSEUgTElTVD8pXG5mdW5jdGlvbiBsb29rdXBUb2RvKHRvZG9UaXRsZSwgcHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIGxvb2t1cFRvZG8gZnVuY3Rpb24gKCR7dG9kb1RpdGxlfSwgJHtwcm9qVGl0bGV9YCk7XG4gICAgbGV0IHNlYXJjaFRvZG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuICAgIGNvbnNvbGUubG9nKGBzZWFyY2hUb2Rvcy5sZW5ndGggaXMgJHtzZWFyY2hUb2Rvc30gYW5kIGlzIGFuIEFycmF5PyAke0FycmF5LmlzQXJyYXkoc2VhcmNoVG9kb3MpfWApO1xuICAgIFxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWFyY2hUb2Rvcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbiB0aGUgZm9yIGxvb3AnKTtcbiAgICAgICAgY29uc29sZS5sb2coYHNlYXJjaFRvZG9zW2ldIGlzICR7c2VhcmNoVG9kb3NbaV0udGl0bGV9IGFuZCBsZW5ndGggaXMgJHtzZWFyY2hUb2Rvcy5sZW5ndGh9IGFuZCB0b2RvVGl0bGUgaXMgJHt0b2RvVGl0bGV9YCk7XG4gICAgICAgIGlmKHNlYXJjaFRvZG9zW2ldLnRpdGxlID09IHRvZG9UaXRsZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgd2UgaGF2ZSBsb2NhdGVkIHRoZSB0b2RvIGl0ZW0gd2hpY2ggaXMgJHtzZWFyY2hUb2Rvc1tpXS50aXRsZX1gKTtcbiAgICAgICAgICAgIGxldCBmb3VuZFRvZG8gPSBzZWFyY2hUb2Rvc1tpXTtcbiAgICAgICAgICAgIHJldHVybiB7IHNlYXJjaFRvZG9zLCBpIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vQ3JlYXRlIGEgbmV3IHByb2plY3Qgb2JqZWN0XG4vL3BhcmFtczogKHByb2plY3QgbmFtZSlcbi8vcmV0dXJuczogYSBuZXcgcHJvamVjdFxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdChwcm9qTmFtZSkge1xuICAgIGxldCB0aXRsZSA9IHByb2pOYW1lO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgY29uc29sZS5sb2coYEkgY3JlYXRlZCBhIHByb2plY3QgbmFtZWQgJHtwcm9qTmFtZX1gKTtcbiAgICBzYXZlVG9Mb2NhbCh7dGl0bGUsIGxpc3R9KTtcbiAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICByZXR1cm4ge3RpdGxlLCBsaXN0fTtcbn1cblxuLy9BZGQgYSB0b2RvIHRvIGEgcHJvamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBhZGRUb1Byb2plY3QodG9kbyxwcm9qKXtcbiAgICBwcm9qLmxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2oudGl0bGUpKS5zbGljZSgpO1xuICAgIHRvZG8uY3VyclByb2plY3ROYW1lID0gcHJvai50aXRsZTtcbiAgICB0b2RvLmluZGV4ID0gcHJvai5saXN0Lmxlbmd0aDsgXG4gICAgcHJvai5saXN0LnB1c2godG9kbyk7XG4gICAgY29uc29sZS5sb2coYEkgYWRkZWQgJHt0b2RvLnRpdGxlfSB0byAke3Byb2oudGl0bGV9IHRoZSBpbmRleCBpcyAke3RvZG8uaW5kZXh9IGFuZCB0aXRsZSBpbiBhcnJheSBpcyAke3Byb2oubGlzdFt0b2RvLmluZGV4XS50aXRsZX1gKTtcbiAgICBzYXZlVG9Mb2NhbChwcm9qKTtcbn1cblxuLy9Nb3ZlIGEgdG9kbyBmcm9tIG9uZSBwcm9qZWN0IHRvIGFub3RoZXI7IGRlbGV0ZSB0aGUgdG9kbyBmcm9tIG9sZCBwcm9qZWN0LCBhZGQgdGhlIHRvZG8gdG8gbmV3IHByb2plY3Rcbi8vcGFyYW1zOiAodG9kbyBvYmplY3QsIHRvLW1vdmUtdG8gcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBtb3ZlVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCkge1xuICAgIGxldCBvbGRQcm9qZWN0ID0geyd0aXRsZSc6dG9kby5jdXJyUHJvamVjdE5hbWUsJ2xpc3QnOkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odG9kby5jdXJyUHJvamVjdE5hbWUpKX07XG4gICAgY29uc29sZS5sb2coYEknbSBhYm91dCB0byBkZWxldGUgZnJvbSBvbGRwcm9qZWN0ICR7b2xkUHJvamVjdC50aXRsZX1gKTtcbiAgICBkZWxldGVUb2RvKHRvZG8sb2xkUHJvamVjdCk7XG4gICAgYWRkVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCk7XG4gIFxufVxuXG4vL1NhdmUgYSBwcm9qZWN0IHRvIGxvY2FsU3RvcmFnZVxuLy9wYXJhbXM6IHByb2plY3Qgb2JqZWN0XG5mdW5jdGlvbiBzYXZlVG9Mb2NhbChwcm9qZWN0KXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIFNhdmV0b0xvY2FsIEZ1bmN0aW9uIGFuZCBwcm9qZWN0IHRpdGxlIGlzICR7cHJvamVjdC50aXRsZX0gYW5kIGxpc3QgaXMgJHtwcm9qZWN0Lmxpc3R9YCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvamVjdC50aXRsZSwgSlNPTi5zdHJpbmdpZnkocHJvamVjdC5saXN0KSk7XG59XG5cblxuLy9FZGl0cyB0b2RvIGFuZCBzYXZlcyB0byBsb2NhbFxuLy9wYXJhbXM6IHRvZG8gb2JqZWN0XG5mdW5jdGlvbiBlZGl0VG9kbyh0b2RvKSB7XG4gICAgY29uc29sZS5sb2coYGVkaXRUb2RvICgke3RvZG8udGl0bGV9LCR7dG9kby5jdXJyUHJvamVjdE5hbWV9LCR7dG9kby5kZXNjcmlwdGlvbn0sJHt0b2RvLmluZGV4fSlgKTtcbiAgICAvLyBsZXQgcmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgdG9kby5jdXJyUHJvamVjdE5hbWUpO1xuICAgIC8vIGxldCBuZXdMaXN0ID0gcmVzdWx0cy5zZWFyY2hUb2Rvcy5zbGljZSgpO1xuICAgIGxldCBuZXdMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0b2RvLmN1cnJQcm9qZWN0TmFtZSkpLnNsaWNlKCk7XG4gICAgbGV0IGkgPSB0b2RvLmluZGV4O1xuICAgIG5ld0xpc3RbaV0udGl0bGUgPSB0b2RvLnRpdGxlO1xuICAgIG5ld0xpc3RbaV0uZGVzY3JpcHRpb24gPSB0b2RvLmRlc2NyaXB0aW9uO1xuICAgIG5ld0xpc3RbaV0uY3VyclByb2plY3ROYW1lID0gdG9kby5jdXJyUHJvamVjdE5hbWU7XG5cbiAgICBsZXQgdXBkYXRlZFByb2plY3QgPSB7XCJ0aXRsZVwiOnRvZG8uY3VyclByb2plY3ROYW1lLFwibGlzdFwiOm5ld0xpc3R9O1xuICAgIHNhdmVUb0xvY2FsKHVwZGF0ZWRQcm9qZWN0KTtcbn1cblxuZXhwb3J0IHtcbiAgICBjcmVhdGVUb2RvLFxuICAgIGVkaXRUb2RvLFxuICAgIGxvb2t1cFRvZG8sXG4gICAgZGVsZXRlVG9kbyxcbiAgICBjcmVhdGVQcm9qZWN0LFxuICAgIGFkZFRvUHJvamVjdCxcbiAgICBtb3ZlVG9Qcm9qZWN0LFxuICAgIHNhdmVUb0xvY2FsXG59OyIsIi8vIGltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG4gaW1wb3J0ICogYXMgY3NzIGZyb20gXCIuL3N0eWxlLmNzc1wiO1xuIGltcG9ydCB7Y3JlYXRlVG9kbywgYWRkVG9Qcm9qZWN0LCBjcmVhdGVQcm9qZWN0LCBtb3ZlVG9Qcm9qZWN0LCBlZGl0VG9kbywgc2F2ZVRvTG9jYWwsIGRlbGV0ZVRvZG8sIGxvb2t1cFRvZG99IGZyb20gXCIuL2Z1bmN0aW9ucy5qc1wiO1xuXG5cbi8vTGlzdGVuIGZvciBuZXcgdG9kb3MgaW4gYSBnaXZlbiBwcm9qZWN0XG4vL3BhcmFtczogcHJvamVjdCBvYmplY3RcblxuZnVuY3Rpb24gbGlzdGVuKCl7XG4gICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGR0b2RvXCIpO1xuICAgIGNvbnN0IGlucHV0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpO1xuXG4gICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKTtcbiAgICAgICAgY29uc29sZS5sb2coYGxpc3RlbiBmdW5jdGlvbiAke3Byb2plY3RUaXRsZS50ZXh0Q29udGVudH1gKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHtcInRpdGxlXCI6cHJvamVjdFRpdGxlLnRleHRDb250ZW50LCBcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3RUaXRsZS50ZXh0Q29udGVudCkpLnNsaWNlKCl9O1xuICAgICAgICBhZGRUb1Byb2plY3QoY3JlYXRlVG9kbyhpbnB1dEJveC52YWx1ZSkscHJvamVjdCk7XG4gICAgICAgIGlucHV0Qm94LnZhbHVlID0gJyc7XG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2plY3QudGl0bGUpO1xuICAgIH0pO1xufVxuXG4vL0xpc3RlbiBmb3IgbmV3IHByb2plY3RzXG5mdW5jdGlvbiBsaXN0ZW5Gb3JOZXdQcm9qZWN0KCkge1xuICAgIGNvbnN0IGFkZFByb2pCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZHByb2plY3RidXR0XCIpO1xuICAgIGNvbnN0IGFkZFByb2pJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdG5hbWVcIik7XG5cbiAgICBhZGRQcm9qQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjcmVhdGVQcm9qZWN0KGFkZFByb2pJbnB1dC52YWx1ZSk7XG4gICAgICAgIGFkZFByb2pJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgfSk7XG59XG5cbi8vQWRkIGEgbGlzdGVuZXIgZm9yIGVhY2ggdG9kbyBsaXN0ZWQgdW5kZXIgYSBwcm9qZWN0XG4vL3BhcmFtczogKG5vZGUgY29udGFpbmluZyB0b2RvIDxsaT4sIHRpdGxlIG9mIHByb2plY3QpXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcih0b2RvSXRlbU5vZGUsIGRpc3BsYXlUb2RvTmFtZSwgcHJvalRpdGxlLCBpKSB7XG4gICAgXG4gICAgdG9kb0l0ZW1Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyBjb25zdCBleHBhbmRUb2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgLy8gZXhwYW5kVG9kby50ZXh0Q29udGVudCA9IFwiRWRpdFwiO1xuICAgICAgICBjb25zb2xlLmxvZyhgYWRkRXZlbnRMaXN0ZW5lciAoJHt0b2RvSXRlbU5vZGV9LCAke3Byb2pUaXRsZX0pYCk7XG5cbiAgICAgICAgZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCBkaXNwbGF5VG9kb05hbWUsIHByb2pUaXRsZSwgaSk7XG4gICAgICAgLy8gdG9kb0l0ZW0uYWZ0ZXIoZXhwYW5kVG9kbyk7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2codG9kb0l0ZW1Ob2RlKTtcbiAgICByZXR1cm4gdG9kb0l0ZW1Ob2RlO1xuXG59XG5cbi8vUmVwbGFjZSB0aGUgdG9kbyBpbiBwcm9qZWN0IGxpc3Qgd2l0aCBpbnB1dCBmaWVsZHMgc28gdXNlciBjYW4gZWRpdFxuLy9wYXJhbXM6IChub2RlIGNvbnRhaW5pbmcgdG9kbyA8bGk+LCB0aXRsZSBvZiBwcm9qZWN0KVxuZnVuY3Rpb24gZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCB0b2RvTmFtZSwgcHJvalRpdGxlLCBpKXtcbiAgICBjb25zb2xlLmxvZyhgZWRpdE1vZGUgKCR7dG9kb05hbWUudGV4dENvbnRlbnR9LCAke3Byb2pUaXRsZX0sICR7aX0pYCk7XG4gICAgLy8gY29uc3QgZm91bmRUb2RvID0gbG9va3VwVG9kbyh0b2RvTmFtZS50ZXh0Q29udGVudCwgcHJvalRpdGxlKTtcbiAgICAvLyBjb25zdCBpbmRleCA9IGZvdW5kVG9kby5pO1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NcIik7XG4gICAgY29uc3QgZWRpdFRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY29uc3QgZWRpdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuICAgIGNvbnN0IGVkaXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTlBVVFwiKTtcbiAgICBjb25zdCBlZGl0Q3VyclByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0VMRUNUXCIpO1xuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gICAgZWRpdFRpdGxlLnZhbHVlID0gdG9kb05hbWUudGV4dENvbnRlbnQ7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHRcIik7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsXCJBZGQgVGl0bGVcIik7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJ0aXRsZUlucHV0XCIpO1xuXG4gICAgZWRpdERlc2NyaXB0aW9uLnZhbHVlID0gcHJvamVjdExpc3RbaV0uZGVzY3JpcHRpb247XG4gICAgZWRpdERlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHRcIik7XG4gICAgZWRpdERlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsXCJBZGQgRGVzY3JpcHRpb25cIik7XG4gICAgZWRpdERlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJkZXNjSW5wdXRcIik7XG5cbiAgICBlZGl0Q3VyclByb2plY3Quc2V0QXR0cmlidXRlKFwidHlwZVwiLFwic2VsZWN0LW9uZVwiKTtcbiAgICBcbiAgICBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpLmZvckVhY2goIChrZXkpID0+IHtcblxuICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0ga2V5O1xuICAgICAgICBlZGl0Q3VyclByb2plY3QuYWRkKG9wdGlvbik7XG4gICAgfSlcblxuICAgIGVkaXRDdXJyUHJvamVjdC52YWx1ZSA9IHByb2pUaXRsZTtcblxuICAgIHNhdmVCdXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiYnV0dG9uXCIpO1xuICAgIHNhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcbiAgICBzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgbm93IHdlIGNyZWF0ZSBhIHRvZG8gdXNpbmcgdGhlc2UgcGFyYW1zICgke2VkaXRUaXRsZS52YWx1ZX0gJHtwcm9qVGl0bGV9ICR7ZWRpdERlc2NyaXB0aW9uLnZhbHVlfSlgKTtcbiAgICAgICAgbGV0IHVwZGF0ZWRUb2RvID0gY3JlYXRlVG9kbyhlZGl0VGl0bGUudmFsdWUsIHByb2pUaXRsZSwgZWRpdERlc2NyaXB0aW9uLnZhbHVlLCBpKTtcbiAgICAgICAgbGV0IHVwZGF0ZWRQcm9qZWN0ID0ge1widGl0bGVcIjplZGl0Q3VyclByb2plY3QudmFsdWUsXCJsaXN0XCI6SlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShlZGl0Q3VyclByb2plY3QudmFsdWUpKX07XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgdXBkYXRlZFRvZG8gdGl0bGUgJHt1cGRhdGVkVG9kby50aXRsZX0gY3VyclByb2pOYW1lICR7dXBkYXRlZFRvZG8uY3VyclByb2plY3ROYW1lfSBkZXNjICR7dXBkYXRlZFRvZG8uZGVzY3JpcHRpb259YCk7XG5cbiAgICAgICAgaWYgKGVkaXRDdXJyUHJvamVjdC52YWx1ZSAhPT0gcHJvalRpdGxlKSBtb3ZlVG9Qcm9qZWN0KHVwZGF0ZWRUb2RvLCB1cGRhdGVkUHJvamVjdCk7XG4gICAgICAgIGVsc2UgZWRpdFRvZG8odXBkYXRlZFRvZG8pO1xuXG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2pUaXRsZSk7XG4gICAgICAgIFxuICAgIH0pO1xuXG5cbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdFRpdGxlKTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdERlc2NyaXB0aW9uKTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdEN1cnJQcm9qZWN0KTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XG5cbiAgICBjb25zdCB0b2RvTGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIHRvZG9MaXN0SXRlbS5hcHBlbmRDaGlsZChlZGl0VG9kb0l0ZW0pO1xuXG4gICAgbGlzdC5yZXBsYWNlQ2hpbGQodG9kb0xpc3RJdGVtLHRvZG9JdGVtTm9kZSk7XG5cbn1cblxuLy9kaXNwbGF5IGEgcHJvamVjdCBhbmQgYWxsIG9mIGl0cyB0b2Rvc1xuLy9wYXJhbXM6IHByb2plY3Qgb2JqZWN0XG5mdW5jdGlvbiBkaXNwbGF5UHJvaihwcm9qVGl0bGUpe1xuXG4gICAgbGV0IHByb2pMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qbmFtZXNwYW5cIikudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvam5hbWVzcGFuXCIpLnRleHRDb250ZW50ID0gcHJvalRpdGxlO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NcIikudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9zXCIpO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaTxwcm9qTGlzdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZGlzcGxheVRvZG9OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvRGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBjb25zdCBkaXNwbGF5Q29sb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgZGlzcGxheVRvZG9OYW1lLnRleHRDb250ZW50ID0gcHJvakxpc3RbaV0udGl0bGU7XG4gICAgICAgIGRpc3BsYXlUb2RvRGVzYy50ZXh0Q29udGVudCA9IHByb2pMaXN0W2ldLmRlc2NyaXB0aW9uO1xuICAgICAgICBkaXNwbGF5Q29sb24udGV4dENvbnRlbnQgPSBcIjogXCI7XG4gICAgICAgIGRpc3BsYXlUb2RvLmFwcGVuZENoaWxkKGRpc3BsYXlUb2RvTmFtZSk7XG4gICAgICAgIGRpc3BsYXlUb2RvLmFwcGVuZENoaWxkKGRpc3BsYXlDb2xvbik7XG4gICAgICAgIGRpc3BsYXlUb2RvLmFwcGVuZENoaWxkKGRpc3BsYXlUb2RvRGVzYyk7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvV2l0aExpc3RlbmVyID0gYWRkTGlzdGVuZXIoZGlzcGxheVRvZG8sIGRpc3BsYXlUb2RvTmFtZSwgcHJvalRpdGxlLCBpKTtcbiAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChkaXNwbGF5VG9kb1dpdGhMaXN0ZW5lcik7XG4gICAgfVxuICAgIFxufVxuXG4vL2Rpc3BsYXkgbGlzdCBvZiBwcm9qZWN0cyBpbiB0aGUgc2lkZW5hdlxuZnVuY3Rpb24gZGlzcGxheVByb2plY3RzKCkge1xuXG4gICAgY29uc3QgcHJvakxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2psaXN0XCIpO1xuICAgIHByb2pMaXN0LmlubmVySFRNTCA9ICcnO1xuICAgIFxuICAgIE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkuZm9yRWFjaCggKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBwLnRleHRDb250ZW50ID0ga2V5O1xuICAgICAgICBwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgZGlzcGxheVByb2ooa2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHByb2pMaXN0LmFwcGVuZENoaWxkKHApO1xuICAgIH0pO1xuXG59XG5cblxuY3JlYXRlUHJvamVjdChcIkluYm94XCIpO1xubGlzdGVuKCk7XG5saXN0ZW5Gb3JOZXdQcm9qZWN0KCk7XG5cbiBleHBvcnQge2Rpc3BsYXlQcm9qZWN0c307Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImNyZWF0ZVRvZG8iLCJ0aXRsZSIsImN1cnJQcm9qZWN0TmFtZSIsImRlc2NyaXB0aW9uIiwiY3JlYXRlUHJvamVjdCIsInByb2pOYW1lIiwiY29uc29sZSIsImxvZyIsInNhdmVUb0xvY2FsIiwiZGlzcGxheVByb2plY3RzIiwiYWRkVG9Qcm9qZWN0IiwidG9kbyIsInByb2oiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzbGljZSIsInByb2plY3QiLCJzZXRJdGVtIiwiYWRkTGlzdGVuZXIiLCJ0b2RvSXRlbU5vZGUiLCJkaXNwbGF5VG9kb05hbWUiLCJwcm9qVGl0bGUiLCJhZGRFdmVudExpc3RlbmVyIiwidG9kb05hbWUiLCJ0ZXh0Q29udGVudCIsInByb2plY3RMaXN0IiwiZWRpdFRvZG9JdGVtIiwiZWRpdFRpdGxlIiwiZWRpdERlc2NyaXB0aW9uIiwiZWRpdEN1cnJQcm9qZWN0Iiwic2F2ZUJ1dHRvbiIsInZhbHVlIiwia2V5cyIsImZvckVhY2giLCJvcHRpb24iLCJhZGQiLCJ1cGRhdGVkVG9kbyIsInVwZGF0ZWRQcm9qZWN0IiwibmV3UHJvamVjdCIsIm9sZFByb2plY3QiLCJkZWxldGVUb2RvIiwibW92ZVRvUHJvamVjdCIsImVkaXRUb2RvIiwiZGlzcGxheVByb2oiLCJ0b2RvTGlzdEl0ZW0iLCJyZXBsYWNlQ2hpbGQiLCJlZGl0TW9kZSIsInByb2pMaXN0IiwiZGlzcGxheVRvZG8iLCJkaXNwbGF5VG9kb0Rlc2MiLCJkaXNwbGF5Q29sb24iLCJkaXNwbGF5VG9kb1dpdGhMaXN0ZW5lciIsImlubmVySFRNTCIsInAiLCJsb2NhbHMiLCJhZGRCdXR0b24iLCJpbnB1dEJveCIsInByb2plY3RUaXRsZSIsImxpc3RlbiIsImFkZFByb2pCdXR0b24iLCJhZGRQcm9qSW5wdXQiLCJsaXN0ZW5Gb3JOZXdQcm9qZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==