(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),a=n(314),c=n.n(a)()(r());c.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}"],sourceRoot:""}]);const i=c},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(c[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);o&&c[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var l=e[i],d=o.base?l[0]+o.base:l[0],s=a[d]||0,u="".concat(d," ").concat(s);a[d]=s+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:A,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var l=o(e,r),d=0;d<a.length;d++){var s=n(a[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{r:()=>x});var e=n(72),t=n.n(e),r=n(825),a=n.n(r),c=n(659),i=n.n(c),l=n(56),d=n.n(l),s=n(540),u=n.n(s),p=n(113),m=n.n(p),A=n(208),f={};function v(e,t,n="",o=0,r="mm/dd/yy",a="medium"){return{title:e,currProjectName:t,description:n,index:o,dueDate:r,priority:a}}function g(e,t){t.list.splice(e.index,1),b(t)}function C(e){let t=e,n=[];return console.log(`I created a project named ${e}`),b({title:t,list:n}),x(),{title:t,list:n}}function y(e,t){t.list=JSON.parse(localStorage.getItem(t.title)).slice(),e.currProjectName=t.title,e.index=t.list.length,t.list.push(e),console.log(`I added ${e.title} to ${t.title} the index is ${e.index} and title in array is ${t.list[e.index].title}`),b(t)}function b(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function h(e,t,n,o){return e.addEventListener("click",(()=>{console.log(`addEventListener (${e}, ${n})`),function(e,t,n,o){console.log(`editMode (${t.textContent}, ${n}, ${o})`);const r=JSON.parse(localStorage.getItem(n)).slice(),a=document.querySelector(".todos"),c=document.createElement("span"),i=document.createElement("INPUT"),l=document.createElement("INPUT"),d=document.createElement("INPUT"),s=document.createElement("SELECT"),u=document.createElement("SELECT"),p=document.createElement("button"),m=document.createElement("button");i.value=t.textContent,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Title"),i.setAttribute("class","titleInput"),l.value=r[o].description,l.setAttribute("type","text"),l.setAttribute("placeholder","Add Description"),l.setAttribute("class","descInput"),d.value=r[o].dueDate,d.setAttribute("type","text"),d.setAttribute("placeholder","Add duedate"),d.setAttribute("class","duedateInput"),s.setAttribute("placeholder","Add priority"),s.setAttribute("class","duedatePriority"),s.setAttribute("type","select-one");let A=document.createElement("option"),f=document.createElement("option"),C=document.createElement("option");A.textContent="high",f.textContent="medium",C.textContent="low",s.add(A),s.add(f),s.add(C),s.value=r[o].priority,u.setAttribute("type","select-one"),Object.keys(localStorage).forEach((e=>{let t=document.createElement("option");t.textContent=e,u.add(t)})),u.value=n,p.setAttribute("type","button"),p.textContent="Save",p.addEventListener("click",(()=>{console.log(`now we create a todo using these params (${i.value} ${n} ${l.value})`);let e=v(i.value,n,l.value,o,d.value,s.value),t={title:u.value,list:JSON.parse(localStorage.getItem(u.value))};console.log(`updatedTodo title ${e.title} currProjName ${e.currProjectName} desc ${e.description}`),u.value!==n?function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),g(e,n),y(e,t)}(e,t):function(e){console.log(`editTodo (${e.title},${e.currProjectName},${e.description},${e.index})`);let t=JSON.parse(localStorage.getItem(e.currProjectName)).slice(),n=e.index;t[n].title=e.title,t[n].description=e.description,t[n].dueDate=e.dueDate,t[n].priority=e.priority,t[n].currProjectName=e.currProjectName,b({title:e.currProjectName,list:t})}(e),I(n)})),m.setAttribute("type","button"),m.textContent="Delete",m.addEventListener("click",(()=>{g(v("",n,"",o),{title:n,list:JSON.parse(localStorage.getItem(n))}),I(n)})),c.appendChild(i),c.appendChild(l),c.appendChild(d),c.appendChild(s),c.appendChild(u),c.appendChild(p),c.appendChild(m);const h=document.createElement("li");h.appendChild(c),a.replaceChild(h,e)}(e,t,n,o)})),console.log(e),e}function I(e){console.log(`i'm in the display Proj function and projTitle is ${e}`);let t=JSON.parse(localStorage.getItem(e)).slice();document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e,document.querySelector(".todos").textContent="";const n=document.querySelector(".todos");for(let o=0;o<t.length;o++){const r=document.createElement("li"),a=document.createElement("span"),c=document.createElement("span"),i=document.createElement("span");a.textContent=t[o].title,c.textContent=t[o].description,i.textContent=": ",r.appendChild(a),r.appendChild(i),r.appendChild(c);const l=h(r,a,e,o);n.appendChild(l)}}function x(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li"),o=document.createElement("span");let r=document.createElement("button");r.textContent="Delete",o.textContent=t,o.addEventListener("click",(()=>{I(t)})),r.addEventListener("click",(()=>{var e;e=t,localStorage.removeItem(e),I("Inbox"),x()})),n.appendChild(o),"Inbox"!==t&&n.appendChild(r),e.appendChild(n)}))}f.styleTagTransform=m(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(A.A,f),A.A&&A.A.locals&&A.A.locals,C("Inbox"),function(){const e=document.querySelector(".addtodo"),t=document.querySelector("#name");e.addEventListener("click",(()=>{const e=document.querySelector(".projnamespan");console.log(`listen function ${e.textContent}`);const n={title:e.textContent,list:JSON.parse(localStorage.getItem(e.textContent)).slice()};y(v(t.value),n),t.value="",I(n.title)}))}(),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{C(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzAlIDcwJTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XG59XG5cbi5tYWluIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xufVxuXG4uc2lkZW5hdiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcbn1cblxuLnRpdGxlIHtcbiAgICBmb250LXNpemU6IDMwcHg7XG59XG5cbi5lbnRyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XG59XG5cbi5kaXNwbGF5YXJlYSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNSwgMTc5LCAyNDkpO1xufVxuXG4ucHJvamxpc3Qge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtnb2xkZW5yb2Q7XG59XG5cbmxpIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XG59XG5cbi50aXRsZUlucHV0IHtcbiAgICB3aWR0aDogNzVweDtcbn1cblxuLmRlc2NJbnB1dCB7XG4gICAgd2lkdGg6IDE1MHB4O1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwJSA3MCU7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMTAwJTtcXG59XFxuXFxuLm1haW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcbn1cXG5cXG4uc2lkZW5hdiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHBpbms7XFxufVxcblxcbi50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXFxuLmVudHJ5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XFxufVxcblxcbi5kaXNwbGF5YXJlYSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTUsIDE3OSwgMjQ5KTtcXG59XFxuXFxuLnByb2psaXN0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dvbGRlbnJvZDtcXG59XFxuXFxubGkge1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4udGl0bGVJbnB1dCB7XFxuICAgIHdpZHRoOiA3NXB4O1xcbn1cXG5cXG4uZGVzY0lucHV0IHtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIiBpbXBvcnQge2Rpc3BsYXlQcm9qZWN0c30gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuLy9jcmVhdGUgYSBuZXcgdG9kbyBvYmplY3Rcbi8vcGFyYW1zOiAodGl0bGUgb2YgdG9kbyxjdXJyZW50IHByb2plY3QgbmFtZSwgZGVzY3JpcHRpb24sIGR1ZWRhdGUpXG5mdW5jdGlvbiBjcmVhdGVUb2RvKHRpdGxlLCBjdXJyUHJvamVjdE5hbWUsIGRlc2NyaXB0aW9uID0gJycsIGluZGV4ID0gMCwgZHVlRGF0ZSA9ICdtbS9kZC95eScsIHByaW9yaXR5ID0gJ21lZGl1bScpIHtcbiAgICBcbiAgICByZXR1cm4ge3RpdGxlLCBjdXJyUHJvamVjdE5hbWUsIGRlc2NyaXB0aW9uLCBpbmRleCwgZHVlRGF0ZSwgcHJpb3JpdHl9O1xufVxuXG4vL3JlbW92ZSBhIHRvZG8gb2JqZWN0IGZyb20gYSBwcm9qZWN0IG9iamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBkZWxldGVUb2RvKHRvZG8scHJvamVjdCl7XG4gICAgLy9jb25zb2xlLmxvZyhgSW4gRGVsZXRlVG9kbyBhbmQgcHJvamVjdCB0aXRsZSBpcyAke3Byb2oudGl0bGV9IGFuZCB0b2RvIGlzICR7dG9kby50aXRsZX1gKTtcbiAgICAvL2NvbnNvbGUubG9nKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvai50aXRsZSkpKTtcbiAgICAvLyBsZXQgc2VhcmNoUmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgcHJvamVjdC50aXRsZSk7XG4gICAgLy8gc2VhcmNoUmVzdWx0cy5zZWFyY2hUb2Rvcy5zcGxpY2Uoc2VhcmNoUmVzdWx0cy5pLDEpO1xuICAgIC8vIHByb2plY3QubGlzdCA9IHNlYXJjaFJlc3VsdHMuc2VhcmNoVG9kb3Muc2xpY2UoKTtcbiAgICBwcm9qZWN0Lmxpc3Quc3BsaWNlKHRvZG8uaW5kZXgsMSk7XG4gICAgc2F2ZVRvTG9jYWwocHJvamVjdCk7XG5cbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvamVjdChwcm9qVGl0bGUpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShwcm9qVGl0bGUpO1xufVxuXG4vL0ZpbmQgYSBzcGVjaWZpYyB0b2RvIGluIHRoZSBwcm9qZWN0IG9iamVjdCBsaXN0IHRvIG1hbmlwdWxhdGUgZnVydGhlclxuLy9wYXJhbXM6ICh0b2RvIHRpdGxlLCBwcm9qZWN0IHRpdGxlKVxuLy9yZXR1cm5zOiBhIG5ldyBvYmplY3QgdGhhdCBoYXMgdGhlIGxpc3QgJiB0aGUgaW5kZXggb2YgdG9kbyBpbiBxdWVzdGlvbiAoRE8gSSBORUVEIFRPIFJFVFVSTiBUSEUgTElTVD8pXG5mdW5jdGlvbiBsb29rdXBUb2RvKHRvZG9UaXRsZSwgcHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIGxvb2t1cFRvZG8gZnVuY3Rpb24gKCR7dG9kb1RpdGxlfSwgJHtwcm9qVGl0bGV9YCk7XG4gICAgbGV0IHNlYXJjaFRvZG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuICAgIGNvbnNvbGUubG9nKGBzZWFyY2hUb2Rvcy5sZW5ndGggaXMgJHtzZWFyY2hUb2Rvc30gYW5kIGlzIGFuIEFycmF5PyAke0FycmF5LmlzQXJyYXkoc2VhcmNoVG9kb3MpfWApO1xuICAgIFxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWFyY2hUb2Rvcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbiB0aGUgZm9yIGxvb3AnKTtcbiAgICAgICAgY29uc29sZS5sb2coYHNlYXJjaFRvZG9zW2ldIGlzICR7c2VhcmNoVG9kb3NbaV0udGl0bGV9IGFuZCBsZW5ndGggaXMgJHtzZWFyY2hUb2Rvcy5sZW5ndGh9IGFuZCB0b2RvVGl0bGUgaXMgJHt0b2RvVGl0bGV9YCk7XG4gICAgICAgIGlmKHNlYXJjaFRvZG9zW2ldLnRpdGxlID09IHRvZG9UaXRsZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgd2UgaGF2ZSBsb2NhdGVkIHRoZSB0b2RvIGl0ZW0gd2hpY2ggaXMgJHtzZWFyY2hUb2Rvc1tpXS50aXRsZX1gKTtcbiAgICAgICAgICAgIGxldCBmb3VuZFRvZG8gPSBzZWFyY2hUb2Rvc1tpXTtcbiAgICAgICAgICAgIHJldHVybiB7IHNlYXJjaFRvZG9zLCBpIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vQ3JlYXRlIGEgbmV3IHByb2plY3Qgb2JqZWN0XG4vL3BhcmFtczogKHByb2plY3QgbmFtZSlcbi8vcmV0dXJuczogYSBuZXcgcHJvamVjdFxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdChwcm9qTmFtZSkge1xuICAgIGxldCB0aXRsZSA9IHByb2pOYW1lO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgY29uc29sZS5sb2coYEkgY3JlYXRlZCBhIHByb2plY3QgbmFtZWQgJHtwcm9qTmFtZX1gKTtcbiAgICBzYXZlVG9Mb2NhbCh7dGl0bGUsIGxpc3R9KTtcbiAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICByZXR1cm4ge3RpdGxlLCBsaXN0fTtcbn1cblxuLy9BZGQgYSB0b2RvIHRvIGEgcHJvamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBhZGRUb1Byb2plY3QodG9kbyxwcm9qKXtcbiAgICBwcm9qLmxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2oudGl0bGUpKS5zbGljZSgpO1xuICAgIHRvZG8uY3VyclByb2plY3ROYW1lID0gcHJvai50aXRsZTtcbiAgICB0b2RvLmluZGV4ID0gcHJvai5saXN0Lmxlbmd0aDsgXG4gICAgcHJvai5saXN0LnB1c2godG9kbyk7XG4gICAgY29uc29sZS5sb2coYEkgYWRkZWQgJHt0b2RvLnRpdGxlfSB0byAke3Byb2oudGl0bGV9IHRoZSBpbmRleCBpcyAke3RvZG8uaW5kZXh9IGFuZCB0aXRsZSBpbiBhcnJheSBpcyAke3Byb2oubGlzdFt0b2RvLmluZGV4XS50aXRsZX1gKTtcbiAgICBzYXZlVG9Mb2NhbChwcm9qKTtcbn1cblxuLy9Nb3ZlIGEgdG9kbyBmcm9tIG9uZSBwcm9qZWN0IHRvIGFub3RoZXI7IGRlbGV0ZSB0aGUgdG9kbyBmcm9tIG9sZCBwcm9qZWN0LCBhZGQgdGhlIHRvZG8gdG8gbmV3IHByb2plY3Rcbi8vcGFyYW1zOiAodG9kbyBvYmplY3QsIHRvLW1vdmUtdG8gcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBtb3ZlVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCkge1xuICAgIGxldCBvbGRQcm9qZWN0ID0geyd0aXRsZSc6dG9kby5jdXJyUHJvamVjdE5hbWUsJ2xpc3QnOkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odG9kby5jdXJyUHJvamVjdE5hbWUpKX07XG4gICAgY29uc29sZS5sb2coYEknbSBhYm91dCB0byBkZWxldGUgZnJvbSBvbGRwcm9qZWN0ICR7b2xkUHJvamVjdC50aXRsZX1gKTtcbiAgICBkZWxldGVUb2RvKHRvZG8sb2xkUHJvamVjdCk7XG4gICAgYWRkVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCk7XG4gIFxufVxuXG4vL1NhdmUgYSBwcm9qZWN0IHRvIGxvY2FsU3RvcmFnZVxuLy9wYXJhbXM6IHByb2plY3Qgb2JqZWN0XG5mdW5jdGlvbiBzYXZlVG9Mb2NhbChwcm9qZWN0KXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIFNhdmV0b0xvY2FsIEZ1bmN0aW9uIGFuZCBwcm9qZWN0IHRpdGxlIGlzICR7cHJvamVjdC50aXRsZX0gYW5kIGxpc3QgaXMgJHtwcm9qZWN0Lmxpc3R9YCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvamVjdC50aXRsZSwgSlNPTi5zdHJpbmdpZnkocHJvamVjdC5saXN0KSk7XG59XG5cblxuLy9FZGl0cyB0b2RvIGFuZCBzYXZlcyB0byBsb2NhbFxuLy9wYXJhbXM6IHRvZG8gb2JqZWN0XG5mdW5jdGlvbiBlZGl0VG9kbyh0b2RvKSB7XG4gICAgY29uc29sZS5sb2coYGVkaXRUb2RvICgke3RvZG8udGl0bGV9LCR7dG9kby5jdXJyUHJvamVjdE5hbWV9LCR7dG9kby5kZXNjcmlwdGlvbn0sJHt0b2RvLmluZGV4fSlgKTtcbiAgICAvLyBsZXQgcmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgdG9kby5jdXJyUHJvamVjdE5hbWUpO1xuICAgIC8vIGxldCBuZXdMaXN0ID0gcmVzdWx0cy5zZWFyY2hUb2Rvcy5zbGljZSgpO1xuICAgIGxldCBuZXdMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0b2RvLmN1cnJQcm9qZWN0TmFtZSkpLnNsaWNlKCk7XG4gICAgbGV0IGkgPSB0b2RvLmluZGV4O1xuICAgIG5ld0xpc3RbaV0udGl0bGUgPSB0b2RvLnRpdGxlO1xuICAgIG5ld0xpc3RbaV0uZGVzY3JpcHRpb24gPSB0b2RvLmRlc2NyaXB0aW9uO1xuICAgIG5ld0xpc3RbaV0uZHVlRGF0ZSA9IHRvZG8uZHVlRGF0ZTtcbiAgICBuZXdMaXN0W2ldLnByaW9yaXR5ID0gdG9kby5wcmlvcml0eTtcbiAgICBuZXdMaXN0W2ldLmN1cnJQcm9qZWN0TmFtZSA9IHRvZG8uY3VyclByb2plY3ROYW1lO1xuXG4gICAgbGV0IHVwZGF0ZWRQcm9qZWN0ID0ge1widGl0bGVcIjp0b2RvLmN1cnJQcm9qZWN0TmFtZSxcImxpc3RcIjpuZXdMaXN0fTtcbiAgICBzYXZlVG9Mb2NhbCh1cGRhdGVkUHJvamVjdCk7XG59XG5cbmV4cG9ydCB7XG4gICAgY3JlYXRlVG9kbyxcbiAgICBlZGl0VG9kbyxcbiAgICBsb29rdXBUb2RvLFxuICAgIGRlbGV0ZVRvZG8sXG4gICAgY3JlYXRlUHJvamVjdCxcbiAgICBhZGRUb1Byb2plY3QsXG4gICAgbW92ZVRvUHJvamVjdCxcbiAgICBzYXZlVG9Mb2NhbCxcbiAgICBkZWxldGVQcm9qZWN0XG59OyIsIi8vIGltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG4gaW1wb3J0ICogYXMgY3NzIGZyb20gXCIuL3N0eWxlLmNzc1wiO1xuIGltcG9ydCB7Y3JlYXRlVG9kbywgZGVsZXRlUHJvamVjdCwgYWRkVG9Qcm9qZWN0LCBjcmVhdGVQcm9qZWN0LCBtb3ZlVG9Qcm9qZWN0LCBlZGl0VG9kbywgc2F2ZVRvTG9jYWwsIGRlbGV0ZVRvZG8sIGxvb2t1cFRvZG99IGZyb20gXCIuL2Z1bmN0aW9ucy5qc1wiO1xuXG5cbi8vTGlzdGVuIGZvciBuZXcgdG9kb3MgaW4gYSBnaXZlbiBwcm9qZWN0XG4vL3BhcmFtczogcHJvamVjdCBvYmplY3RcblxuZnVuY3Rpb24gbGlzdGVuKCl7XG4gICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGR0b2RvXCIpO1xuICAgIGNvbnN0IGlucHV0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpO1xuXG4gICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKTtcbiAgICAgICAgY29uc29sZS5sb2coYGxpc3RlbiBmdW5jdGlvbiAke3Byb2plY3RUaXRsZS50ZXh0Q29udGVudH1gKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHtcInRpdGxlXCI6cHJvamVjdFRpdGxlLnRleHRDb250ZW50LCBcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3RUaXRsZS50ZXh0Q29udGVudCkpLnNsaWNlKCl9O1xuICAgICAgICBhZGRUb1Byb2plY3QoY3JlYXRlVG9kbyhpbnB1dEJveC52YWx1ZSkscHJvamVjdCk7XG4gICAgICAgIGlucHV0Qm94LnZhbHVlID0gJyc7XG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2plY3QudGl0bGUpO1xuICAgIH0pO1xufVxuXG4vL0xpc3RlbiBmb3IgbmV3IHByb2plY3RzXG5mdW5jdGlvbiBsaXN0ZW5Gb3JOZXdQcm9qZWN0KCkge1xuICAgIGNvbnN0IGFkZFByb2pCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZHByb2plY3RidXR0XCIpO1xuICAgIGNvbnN0IGFkZFByb2pJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdG5hbWVcIik7XG5cbiAgICBhZGRQcm9qQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjcmVhdGVQcm9qZWN0KGFkZFByb2pJbnB1dC52YWx1ZSk7XG4gICAgICAgIGFkZFByb2pJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgfSk7XG59XG5cbi8vQWRkIGEgbGlzdGVuZXIgZm9yIGVhY2ggdG9kbyBsaXN0ZWQgdW5kZXIgYSBwcm9qZWN0XG4vL3BhcmFtczogKG5vZGUgY29udGFpbmluZyB0b2RvIDxsaT4sIHRpdGxlIG9mIHByb2plY3QpXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcih0b2RvSXRlbU5vZGUsIGRpc3BsYXlUb2RvTmFtZSwgcHJvalRpdGxlLCBpKSB7XG4gICAgXG4gICAgdG9kb0l0ZW1Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyBjb25zdCBleHBhbmRUb2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgLy8gZXhwYW5kVG9kby50ZXh0Q29udGVudCA9IFwiRWRpdFwiO1xuICAgICAgICBjb25zb2xlLmxvZyhgYWRkRXZlbnRMaXN0ZW5lciAoJHt0b2RvSXRlbU5vZGV9LCAke3Byb2pUaXRsZX0pYCk7XG5cbiAgICAgICAgZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCBkaXNwbGF5VG9kb05hbWUsIHByb2pUaXRsZSwgaSk7XG4gICAgICAgLy8gdG9kb0l0ZW0uYWZ0ZXIoZXhwYW5kVG9kbyk7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2codG9kb0l0ZW1Ob2RlKTtcbiAgICByZXR1cm4gdG9kb0l0ZW1Ob2RlO1xuXG59XG5cbi8vUmVwbGFjZSB0aGUgdG9kbyBpbiBwcm9qZWN0IGxpc3Qgd2l0aCBpbnB1dCBmaWVsZHMgc28gdXNlciBjYW4gZWRpdFxuLy9wYXJhbXM6IChub2RlIGNvbnRhaW5pbmcgdG9kbyA8bGk+LCB0aXRsZSBvZiBwcm9qZWN0KVxuZnVuY3Rpb24gZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCB0b2RvTmFtZSwgcHJvalRpdGxlLCBpKXtcbiAgICBjb25zb2xlLmxvZyhgZWRpdE1vZGUgKCR7dG9kb05hbWUudGV4dENvbnRlbnR9LCAke3Byb2pUaXRsZX0sICR7aX0pYCk7XG4gICAgLy8gY29uc3QgZm91bmRUb2RvID0gbG9va3VwVG9kbyh0b2RvTmFtZS50ZXh0Q29udGVudCwgcHJvalRpdGxlKTtcbiAgICAvLyBjb25zdCBpbmRleCA9IGZvdW5kVG9kby5pO1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NcIik7XG4gICAgY29uc3QgZWRpdFRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY29uc3QgZWRpdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuICAgIGNvbnN0IGVkaXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTlBVVFwiKTtcbiAgICBjb25zdCBlZGl0RHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTlBVVFwiKTtcbiAgICBjb25zdCBlZGl0UHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0VMRUNUXCIpO1xuICAgIGNvbnN0IGVkaXRDdXJyUHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTRUxFQ1RcIik7XG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICAgIGVkaXRUaXRsZS52YWx1ZSA9IHRvZG9OYW1lLnRleHRDb250ZW50O1xuICAgIGVkaXRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJ0ZXh0XCIpO1xuICAgIGVkaXRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLFwiQWRkIFRpdGxlXCIpO1xuICAgIGVkaXRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwidGl0bGVJbnB1dFwiKTtcblxuICAgIGVkaXREZXNjcmlwdGlvbi52YWx1ZSA9IHByb2plY3RMaXN0W2ldLmRlc2NyaXB0aW9uO1xuICAgIGVkaXREZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJ0ZXh0XCIpO1xuICAgIGVkaXREZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLFwiQWRkIERlc2NyaXB0aW9uXCIpO1xuICAgIGVkaXREZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwiZGVzY0lucHV0XCIpO1xuICAgIFxuICAgIGVkaXREdWVEYXRlLnZhbHVlID0gcHJvamVjdExpc3RbaV0uZHVlRGF0ZTtcbiAgICBlZGl0RHVlRGF0ZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJ0ZXh0XCIpO1xuICAgIGVkaXREdWVEYXRlLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsXCJBZGQgZHVlZGF0ZVwiKTtcbiAgICBlZGl0RHVlRGF0ZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwiZHVlZGF0ZUlucHV0XCIpO1xuXG4gICAgXG4gICAgZWRpdFByaW9yaXR5LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsXCJBZGQgcHJpb3JpdHlcIik7XG4gICAgZWRpdFByaW9yaXR5LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJkdWVkYXRlUHJpb3JpdHlcIik7XG4gICAgZWRpdFByaW9yaXR5LnNldEF0dHJpYnV0ZShcInR5cGVcIixcInNlbGVjdC1vbmVcIik7XG5cbiAgICBsZXQgaGlnaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgbGV0IG1lZGl1bSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgbGV0IGxvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cbiAgICBoaWdoLnRleHRDb250ZW50ID0gXCJoaWdoXCI7XG4gICAgbWVkaXVtLnRleHRDb250ZW50ID0gXCJtZWRpdW1cIjtcbiAgICBsb3cudGV4dENvbnRlbnQgPSBcImxvd1wiO1xuXG4gICAgZWRpdFByaW9yaXR5LmFkZChoaWdoKTtcbiAgICBlZGl0UHJpb3JpdHkuYWRkKG1lZGl1bSk7XG4gICAgZWRpdFByaW9yaXR5LmFkZChsb3cpO1xuXG4gICAgZWRpdFByaW9yaXR5LnZhbHVlID0gcHJvamVjdExpc3RbaV0ucHJpb3JpdHk7XG5cblxuICAgIGVkaXRDdXJyUHJvamVjdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJzZWxlY3Qtb25lXCIpO1xuICAgIFxuICAgIE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkuZm9yRWFjaCggKGtleSkgPT4ge1xuXG4gICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBrZXk7XG4gICAgICAgIGVkaXRDdXJyUHJvamVjdC5hZGQob3B0aW9uKTtcbiAgICB9KVxuXG4gICAgZWRpdEN1cnJQcm9qZWN0LnZhbHVlID0gcHJvalRpdGxlO1xuXG4gICAgc2F2ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJidXR0b25cIik7XG4gICAgc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAgIHNhdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBub3cgd2UgY3JlYXRlIGEgdG9kbyB1c2luZyB0aGVzZSBwYXJhbXMgKCR7ZWRpdFRpdGxlLnZhbHVlfSAke3Byb2pUaXRsZX0gJHtlZGl0RGVzY3JpcHRpb24udmFsdWV9KWApO1xuICAgICAgICBsZXQgdXBkYXRlZFRvZG8gPSBjcmVhdGVUb2RvKGVkaXRUaXRsZS52YWx1ZSwgcHJvalRpdGxlLCBlZGl0RGVzY3JpcHRpb24udmFsdWUsIGksIGVkaXREdWVEYXRlLnZhbHVlLCBlZGl0UHJpb3JpdHkudmFsdWUpO1xuICAgICAgICBsZXQgdXBkYXRlZFByb2plY3QgPSB7XCJ0aXRsZVwiOmVkaXRDdXJyUHJvamVjdC52YWx1ZSxcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGVkaXRDdXJyUHJvamVjdC52YWx1ZSkpfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGB1cGRhdGVkVG9kbyB0aXRsZSAke3VwZGF0ZWRUb2RvLnRpdGxlfSBjdXJyUHJvak5hbWUgJHt1cGRhdGVkVG9kby5jdXJyUHJvamVjdE5hbWV9IGRlc2MgJHt1cGRhdGVkVG9kby5kZXNjcmlwdGlvbn1gKTtcblxuICAgICAgICBpZiAoZWRpdEN1cnJQcm9qZWN0LnZhbHVlICE9PSBwcm9qVGl0bGUpIG1vdmVUb1Byb2plY3QodXBkYXRlZFRvZG8sIHVwZGF0ZWRQcm9qZWN0KTtcbiAgICAgICAgZWxzZSBlZGl0VG9kbyh1cGRhdGVkVG9kbyk7XG5cbiAgICAgICAgZGlzcGxheVByb2oocHJvalRpdGxlKTtcbiAgICAgICAgXG4gICAgfSk7XG5cbiAgICBkZWxldGVCdXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiYnV0dG9uXCIpO1xuICAgIGRlbGV0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRGVsZXRlXCI7XG4gICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBsZXQgdG9kb1RvRGVsZXRlID0gY3JlYXRlVG9kbygnJywgcHJvalRpdGxlLCAnJywgaSk7XG4gICAgICAgIGxldCBwcm9qZWN0VG9EZWxldGVGcm9tID0ge1widGl0bGVcIjpwcm9qVGl0bGUsIFwibGlzdFwiOkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvalRpdGxlKSl9O1xuICAgICAgICBkZWxldGVUb2RvKHRvZG9Ub0RlbGV0ZSwgcHJvamVjdFRvRGVsZXRlRnJvbSk7XG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2pUaXRsZSk7XG4gICAgfSk7XG5cblxuXG4gICAgZWRpdFRvZG9JdGVtLmFwcGVuZENoaWxkKGVkaXRUaXRsZSk7XG4gICAgZWRpdFRvZG9JdGVtLmFwcGVuZENoaWxkKGVkaXREZXNjcmlwdGlvbik7XG4gICAgZWRpdFRvZG9JdGVtLmFwcGVuZENoaWxkKGVkaXREdWVEYXRlKTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdFByaW9yaXR5KTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdEN1cnJQcm9qZWN0KTtcbiAgICBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XG4gICAgZWRpdFRvZG9JdGVtLmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XG5cbiAgICBjb25zdCB0b2RvTGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIHRvZG9MaXN0SXRlbS5hcHBlbmRDaGlsZChlZGl0VG9kb0l0ZW0pO1xuXG4gICAgbGlzdC5yZXBsYWNlQ2hpbGQodG9kb0xpc3RJdGVtLHRvZG9JdGVtTm9kZSk7XG5cbn1cblxuLy9kaXNwbGF5IGEgcHJvamVjdCBhbmQgYWxsIG9mIGl0cyB0b2Rvc1xuLy9wYXJhbXM6IHByb2plY3Qgb2JqZWN0XG5mdW5jdGlvbiBkaXNwbGF5UHJvaihwcm9qVGl0bGUpe1xuICAgIGNvbnNvbGUubG9nKGBpJ20gaW4gdGhlIGRpc3BsYXkgUHJvaiBmdW5jdGlvbiBhbmQgcHJvalRpdGxlIGlzICR7cHJvalRpdGxlfWApO1xuICAgIGxldCBwcm9qTGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvalRpdGxlKSkuc2xpY2UoKTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvam5hbWVzcGFuXCIpLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKS50ZXh0Q29udGVudCA9IHByb2pUaXRsZTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9zXCIpLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2Rvc1wiKTtcblxuICAgIGZvcihsZXQgaSA9IDA7IGk8cHJvakxpc3QubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBkaXNwbGF5VG9kbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBjb25zdCBkaXNwbGF5VG9kb0Rlc2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgY29uc3QgZGlzcGxheUNvbG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGRpc3BsYXlUb2RvTmFtZS50ZXh0Q29udGVudCA9IHByb2pMaXN0W2ldLnRpdGxlO1xuICAgICAgICBkaXNwbGF5VG9kb0Rlc2MudGV4dENvbnRlbnQgPSBwcm9qTGlzdFtpXS5kZXNjcmlwdGlvbjtcbiAgICAgICAgZGlzcGxheUNvbG9uLnRleHRDb250ZW50ID0gXCI6IFwiO1xuICAgICAgICBkaXNwbGF5VG9kby5hcHBlbmRDaGlsZChkaXNwbGF5VG9kb05hbWUpO1xuICAgICAgICBkaXNwbGF5VG9kby5hcHBlbmRDaGlsZChkaXNwbGF5Q29sb24pO1xuICAgICAgICBkaXNwbGF5VG9kby5hcHBlbmRDaGlsZChkaXNwbGF5VG9kb0Rlc2MpO1xuICAgICAgICBjb25zdCBkaXNwbGF5VG9kb1dpdGhMaXN0ZW5lciA9IGFkZExpc3RlbmVyKGRpc3BsYXlUb2RvLCBkaXNwbGF5VG9kb05hbWUsIHByb2pUaXRsZSwgaSk7XG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9XaXRoTGlzdGVuZXIpO1xuICAgIH1cbiAgICBcbn1cblxuLy9kaXNwbGF5IGxpc3Qgb2YgcHJvamVjdHMgaW4gdGhlIHNpZGVuYXZcbmZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0cygpIHtcblxuICAgIGNvbnN0IHByb2pMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qbGlzdFwiKTtcbiAgICBwcm9qTGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICBcbiAgICBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpLmZvckVhY2goIChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgbGV0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRGVsZXRlXCI7XG5cbiAgICAgICAgcC50ZXh0Q29udGVudCA9IGtleTtcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGRpc3BsYXlQcm9qKGtleSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZVByb2plY3Qoa2V5KTtcbiAgICAgICAgICAgIGRpc3BsYXlQcm9qKFwiSW5ib3hcIik7XG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXG4gICAgICAgIGxpLmFwcGVuZENoaWxkKHApO1xuICAgICAgICBpZihrZXkgIT09IFwiSW5ib3hcIikgbGkuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcbiAgICAgICAgcHJvakxpc3QuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICBcbiAgICB9KTtcblxufVxuXG5cbmNyZWF0ZVByb2plY3QoXCJJbmJveFwiKTtcbmxpc3RlbigpO1xubGlzdGVuRm9yTmV3UHJvamVjdCgpO1xuXG4gZXhwb3J0IHtkaXNwbGF5UHJvamVjdHN9OyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJjcmVhdGVUb2RvIiwidGl0bGUiLCJjdXJyUHJvamVjdE5hbWUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImRlbGV0ZVRvZG8iLCJ0b2RvIiwicHJvamVjdCIsInNhdmVUb0xvY2FsIiwiY3JlYXRlUHJvamVjdCIsInByb2pOYW1lIiwiY29uc29sZSIsImxvZyIsImRpc3BsYXlQcm9qZWN0cyIsImFkZFRvUHJvamVjdCIsInByb2oiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzbGljZSIsInNldEl0ZW0iLCJhZGRMaXN0ZW5lciIsInRvZG9JdGVtTm9kZSIsImRpc3BsYXlUb2RvTmFtZSIsInByb2pUaXRsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2RvTmFtZSIsInRleHRDb250ZW50IiwicHJvamVjdExpc3QiLCJlZGl0VG9kb0l0ZW0iLCJlZGl0VGl0bGUiLCJlZGl0RGVzY3JpcHRpb24iLCJlZGl0RHVlRGF0ZSIsImVkaXRQcmlvcml0eSIsImVkaXRDdXJyUHJvamVjdCIsInNhdmVCdXR0b24iLCJkZWxldGVCdXR0b24iLCJ2YWx1ZSIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJhZGQiLCJrZXlzIiwiZm9yRWFjaCIsIm9wdGlvbiIsInVwZGF0ZWRUb2RvIiwidXBkYXRlZFByb2plY3QiLCJuZXdQcm9qZWN0Iiwib2xkUHJvamVjdCIsIm1vdmVUb1Byb2plY3QiLCJlZGl0VG9kbyIsImRpc3BsYXlQcm9qIiwidG9kb0xpc3RJdGVtIiwicmVwbGFjZUNoaWxkIiwiZWRpdE1vZGUiLCJwcm9qTGlzdCIsImRpc3BsYXlUb2RvIiwiZGlzcGxheVRvZG9EZXNjIiwiZGlzcGxheUNvbG9uIiwiZGlzcGxheVRvZG9XaXRoTGlzdGVuZXIiLCJpbm5lckhUTUwiLCJsaSIsInAiLCJyZW1vdmVJdGVtIiwibG9jYWxzIiwiYWRkQnV0dG9uIiwiaW5wdXRCb3giLCJwcm9qZWN0VGl0bGUiLCJsaXN0ZW4iLCJhZGRQcm9qQnV0dG9uIiwiYWRkUHJvaklucHV0IiwibGlzdGVuRm9yTmV3UHJvamVjdCJdLCJzb3VyY2VSb290IjoiIn0=