(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),c=n(314),a=n.n(c)()(r());a.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}"],sourceRoot:""}]);const i=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);o&&a[u[0]]||(void 0!==c&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=c),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},a=[],i=0;i<e.length;i++){var l=e[i],s=o.base?l[0]+o.base:l[0],u=c[s]||0,d="".concat(s," ").concat(u);c[s]=u+1;var p=n(d),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var f=r(A,o);o.byIndex=i,t.splice(i,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var i=n(c[a]);t[i].references--}for(var l=o(e,r),s=0;s<c.length;s++){var u=n(c[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}c=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(72),t=n.n(e),o=n(825),r=n.n(o),c=n(659),a=n.n(c),i=n(56),l=n.n(i),s=n(540),u=n.n(s),d=n(113),p=n.n(d),A=n(208),f={};function m(e,t){return e.addEventListener("click",(()=>{!function(e,t){const n=v(e.textContent,t),o=n.i;document.createElement("option");const r=document.querySelector(".todos"),c=document.createElement("span"),a=document.createElement("INPUT"),i=document.createElement("INPUT"),l=document.createElement("SELECT"),s=document.createElement("button");a.value=e.textContent,a.setAttribute("type","text"),a.setAttribute("placeholder","Add Title"),a.setAttribute("class","titleInput"),i.value=n.searchTodos[o].description,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Description"),i.setAttribute("class","descInput"),l.setAttribute("type","select-one"),Object.keys(localStorage).forEach((e=>{let t=document.createElement("option");t.textContent=e,l.add(t)})),l.value=t,s.setAttribute("type","button"),s.textContent="Save",s.addEventListener("click",(()=>{if(C("title",a.value,e.textContent,t),C("description",i.value,e.textContent,t),l.value!==t){let n=v(e.textContent,t),o={title:l.value,list:JSON.parse(localStorage.getItem(l.value))};console.log(`the todo we're moving is ${n.searchTodos[n.i].title}`),function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),g(e,t),function(e,t){let n=v(e.title,t.title);n.searchTodos.splice(n.i,1),t.list=n.searchTodos.slice(),b(t)}(e,n)}(n.searchTodos[n.i],o)}})),c.appendChild(a),c.appendChild(i),c.appendChild(l),c.appendChild(s),r.replaceChild(c,e)}(e,t)})),console.log(e),e}function v(e,t){console.log("In the lookupTodo function");let n=JSON.parse(localStorage.getItem(t)).slice();for(let t=0;t<n.length;t++)if(n[t].title==e)return console.log(`we have located the todo item which is ${n[t].title}`),n[t],{searchTodos:n,i:t}}function h(e){let t=e,n=[];return console.log(`I created a project named ${e}`),b({title:t,list:n}),function(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li");n.textContent=t,e.appendChild(n)}))}(),{title:t,list:n}}function g(e,t){e.currProjectName=t.title,t.list.push(e),console.log(`I added ${e.title} to ${t.title}`),b(t)}function b(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function C(e,t,n,o){let r=v(n,o);switch(e){case"title":r.searchTodos[r.i].title=t;break;case"description":r.searchTodos[r.i].description=t;break;case"currProjName":r.searchTodos[r.i].currProjectName=t}b({title:o,list:r.searchTodos.slice()})}f.styleTagTransform=p(),f.setAttributes=l(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),t()(A.A,f),A.A&&A.A.locals&&A.A.locals,function(e){const t=document.querySelector(".addtodo"),n=document.querySelector("#name");console.log(e.title),t.addEventListener("click",(()=>{g(function(e,t,n="",o=""){return{title:e,currProjectName:void 0,description:n,dueDate:o}}(n.value),e),n.value="",function(e){document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e.title,document.querySelector(".todos").textContent="";const t=document.querySelector(".todos");for(let n=0;n<e.list.length;n++){const o=document.createElement("li");o.textContent=e.list[n].title;const r=m(o,e.title);t.appendChild(r),console.log(e.list[n].title)}}(e)}))}(h("Inbox")),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{h(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,