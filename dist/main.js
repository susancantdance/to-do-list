(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),c=n(314),a=n.n(c)()(r());a.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}"],sourceRoot:""}]);const i=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&a[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var c={},a=[],i=0;i<e.length;i++){var l=e[i],s=o.base?l[0]+o.base:l[0],d=c[s]||0,u="".concat(s," ").concat(d);c[s]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:A,references:1})}a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var c=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var i=n(c[a]);t[i].references--}for(var l=o(e,r),s=0;s<c.length;s++){var d=n(c[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var c=t[o]={id:o,exports:{}};return e[o](c,c.exports,n),c.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{r:()=>x});var e=n(72),t=n.n(e),r=n(825),c=n.n(r),a=n(659),i=n.n(a),l=n(56),s=n.n(l),d=n(540),u=n.n(d),p=n(113),m=n.n(p),A=n(208),f={};function g(e,t,n="",o=""){return{title:e,currProjectName:t,description:n,dueDate:o}}function v(e,t){console.log(`In the lookupTodo function (${e}, ${t}`);let n=JSON.parse(localStorage.getItem(t)).slice();console.log(`searchTodos.length is ${n} and is an Array? ${Array.isArray(n)}`);for(let t=0;t<n.length;t++)if(console.log("in the for loop"),console.log(`searchTodos[i] is ${n[t].title} and length is ${n.length} and todoTitle is ${e}`),n[t].title==e)return console.log(`we have located the todo item which is ${n[t].title}`),n[t],{searchTodos:n,i:t}}function h(e){let t=e,n=[];return console.log(`I created a project named ${e}`),y({title:t,list:n}),x(),{title:t,list:n}}function C(e,t){t.list=JSON.parse(localStorage.getItem(t.title)).slice(),e.currProjectName=t.title,t.list.push(e),console.log(`I added ${e.title} to ${t.title} array[o] is ${t.list[0].title}`),y(t)}function y(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function b(e,t,n){return e.addEventListener("click",(()=>{console.log(`addEventListener (${e}, ${n})`),function(e,t,n){console.log(`editMode (${t.textContent}, ${n})`);const o=v(t.textContent,n),r=o.i,c=document.querySelector(".todos"),a=document.createElement("span"),i=document.createElement("INPUT"),l=document.createElement("INPUT"),s=document.createElement("SELECT"),d=document.createElement("button");i.value=t.textContent,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Title"),i.setAttribute("class","titleInput"),l.value=o.searchTodos[r].description,l.setAttribute("type","text"),l.setAttribute("placeholder","Add Description"),l.setAttribute("class","descInput"),s.setAttribute("type","select-one"),Object.keys(localStorage).forEach((e=>{let t=document.createElement("option");t.textContent=e,s.add(t)})),s.value=n,d.setAttribute("type","button"),d.textContent="Save",d.addEventListener("click",(()=>{console.log(`now we create a todo using these params (${i.value} ${n} ${l.value})`);let e=g(i.value,n,l.value),t={title:s.value,list:JSON.parse(localStorage.getItem(s.value))};console.log(`updatedTodo title ${e.title} currProjName ${e.currProjectName} desc ${e.description}`),s.value!==n?function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),function(e,t){let n=v(e.title,t.title);n.searchTodos.splice(n.i,1),t.list=n.searchTodos.slice(),y(t)}(e,n),C(e,t)}(e,t):function(e){console.log(`editTodo (${e.title},${e.currProjectName},${e.description})`);let t=v(e.title,e.currProjectName),n=t.searchTodos.slice(),o=t.i;n[o].title=e.title,n[o].description=e.description,n[o].currProjectName=e.currProjectName,y({title:e.currProjectName,list:n})}(e),I(n)})),a.appendChild(i),a.appendChild(l),a.appendChild(s),a.appendChild(d);const u=document.createElement("li");u.appendChild(a),c.replaceChild(u,e)}(e,t,n)})),console.log(e),e}function I(e){let t=JSON.parse(localStorage.getItem(e)).slice();document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e,document.querySelector(".todos").textContent="";const n=document.querySelector(".todos");for(let o=0;o<t.length;o++){const r=document.createElement("li"),c=document.createElement("span"),a=document.createElement("span"),i=document.createElement("span");c.textContent=t[o].title,a.textContent=t[o].description,i.textContent=": ",r.appendChild(c),r.appendChild(i),r.appendChild(a);const l=b(r,c,e);n.appendChild(l)}}function x(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li");n.textContent=t,n.addEventListener("click",(()=>{I(t)})),e.appendChild(n)}))}f.styleTagTransform=m(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=c(),f.insertStyleElement=u(),t()(A.A,f),A.A&&A.A.locals&&A.A.locals,h("Inbox"),function(){const e=document.querySelector(".addtodo"),t=document.querySelector("#name");e.addEventListener("click",(()=>{const e=document.querySelector(".projnamespan");console.log(`listen function ${e.textContent}`);const n={title:e.textContent,list:JSON.parse(localStorage.getItem(e.textContent)).slice()};C(g(t.value),n),t.value="",I(n.title)}))}(),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{h(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZCxHQUN4Q3lDLEVBQVMzQixNQUFRLEdBQ2pCYyxFQUFZNUIsRUFBUXZCLE1BQU0sR0FFbEMsQ0ErSUFrRSxHQTVJQSxXQUNJLE1BQU1DLEVBQWdCckgsU0FBU0MsY0FBYyxtQkFDdkNxSCxFQUFldEgsU0FBU0MsY0FBYyxnQkFFNUNvSCxFQUFjdkMsaUJBQWlCLFNBQVMsS0FDcENaLEVBQWNvRCxFQUFhL0IsT0FDM0IrQixFQUFhL0IsTUFBUSxFQUFFLEdBRy9CLENBb0lBZ0MsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzAlIDcwJTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XG59XG5cbi5tYWluIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xufVxuXG4uc2lkZW5hdiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcbn1cblxuLnRpdGxlIHtcbiAgICBmb250LXNpemU6IDMwcHg7XG59XG5cbi5lbnRyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XG59XG5cbi5kaXNwbGF5YXJlYSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNSwgMTc5LCAyNDkpO1xufVxuXG4ucHJvamxpc3Qge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtnb2xkZW5yb2Q7XG59XG5cbmxpIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XG59XG5cbi50aXRsZUlucHV0IHtcbiAgICB3aWR0aDogNzVweDtcbn1cblxuLmRlc2NJbnB1dCB7XG4gICAgd2lkdGg6IDE1MHB4O1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwJSA3MCU7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMTAwJTtcXG59XFxuXFxuLm1haW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcbn1cXG5cXG4uc2lkZW5hdiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHBpbms7XFxufVxcblxcbi50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuXFxuLmVudHJ5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XFxufVxcblxcbi5kaXNwbGF5YXJlYSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTUsIDE3OSwgMjQ5KTtcXG59XFxuXFxuLnByb2psaXN0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dvbGRlbnJvZDtcXG59XFxuXFxubGkge1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4udGl0bGVJbnB1dCB7XFxuICAgIHdpZHRoOiA3NXB4O1xcbn1cXG5cXG4uZGVzY0lucHV0IHtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIiBpbXBvcnQge2Rpc3BsYXlQcm9qZWN0c30gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuLy9jcmVhdGUgYSBuZXcgdG9kbyBvYmplY3Rcbi8vcGFyYW1zOiAodGl0bGUgb2YgdG9kbyxjdXJyZW50IHByb2plY3QgbmFtZSwgZGVzY3JpcHRpb24sIGR1ZWRhdGUpXG5mdW5jdGlvbiBjcmVhdGVUb2RvKHRpdGxlLCBjdXJyUHJvamVjdE5hbWUsIGRlc2NyaXB0aW9uID0gJycsIGR1ZURhdGUgPSAnJykge1xuICAgIFxuICAgIHJldHVybiB7dGl0bGUsIGN1cnJQcm9qZWN0TmFtZSwgZGVzY3JpcHRpb24sIGR1ZURhdGV9O1xufVxuXG4vL3JlbW92ZSBhIHRvZG8gb2JqZWN0IGZyb20gYSBwcm9qZWN0IG9iamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBkZWxldGVUb2RvKHRvZG8scHJvamVjdCl7XG4gICAgLy9jb25zb2xlLmxvZyhgSW4gRGVsZXRlVG9kbyBhbmQgcHJvamVjdCB0aXRsZSBpcyAke3Byb2oudGl0bGV9IGFuZCB0b2RvIGlzICR7dG9kby50aXRsZX1gKTtcbiAgICAvL2NvbnNvbGUubG9nKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvai50aXRsZSkpKTtcbiAgICBsZXQgc2VhcmNoUmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgcHJvamVjdC50aXRsZSk7XG4gICAgc2VhcmNoUmVzdWx0cy5zZWFyY2hUb2Rvcy5zcGxpY2Uoc2VhcmNoUmVzdWx0cy5pLDEpO1xuICAgIHByb2plY3QubGlzdCA9IHNlYXJjaFJlc3VsdHMuc2VhcmNoVG9kb3Muc2xpY2UoKTtcbiAgICBzYXZlVG9Mb2NhbChwcm9qZWN0KTtcblxufVxuXG4vL0ZpbmQgYSBzcGVjaWZpYyB0b2RvIGluIHRoZSBwcm9qZWN0IG9iamVjdCBsaXN0IHRvIG1hbmlwdWxhdGUgZnVydGhlclxuLy9wYXJhbXM6ICh0b2RvIHRpdGxlLCBwcm9qZWN0IHRpdGxlKVxuLy9yZXR1cm5zOiBhIG5ldyBvYmplY3QgdGhhdCBoYXMgdGhlIGxpc3QgJiB0aGUgaW5kZXggb2YgdG9kbyBpbiBxdWVzdGlvbiAoRE8gSSBORUVEIFRPIFJFVFVSTiBUSEUgTElTVD8pXG5mdW5jdGlvbiBsb29rdXBUb2RvKHRvZG9UaXRsZSwgcHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIGxvb2t1cFRvZG8gZnVuY3Rpb24gKCR7dG9kb1RpdGxlfSwgJHtwcm9qVGl0bGV9YCk7XG4gICAgbGV0IHNlYXJjaFRvZG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuICAgIGNvbnNvbGUubG9nKGBzZWFyY2hUb2Rvcy5sZW5ndGggaXMgJHtzZWFyY2hUb2Rvc30gYW5kIGlzIGFuIEFycmF5PyAke0FycmF5LmlzQXJyYXkoc2VhcmNoVG9kb3MpfWApO1xuICAgIFxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWFyY2hUb2Rvcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbiB0aGUgZm9yIGxvb3AnKTtcbiAgICAgICAgY29uc29sZS5sb2coYHNlYXJjaFRvZG9zW2ldIGlzICR7c2VhcmNoVG9kb3NbaV0udGl0bGV9IGFuZCBsZW5ndGggaXMgJHtzZWFyY2hUb2Rvcy5sZW5ndGh9IGFuZCB0b2RvVGl0bGUgaXMgJHt0b2RvVGl0bGV9YCk7XG4gICAgICAgIGlmKHNlYXJjaFRvZG9zW2ldLnRpdGxlID09IHRvZG9UaXRsZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgd2UgaGF2ZSBsb2NhdGVkIHRoZSB0b2RvIGl0ZW0gd2hpY2ggaXMgJHtzZWFyY2hUb2Rvc1tpXS50aXRsZX1gKTtcbiAgICAgICAgICAgIGxldCBmb3VuZFRvZG8gPSBzZWFyY2hUb2Rvc1tpXTtcbiAgICAgICAgICAgIHJldHVybiB7IHNlYXJjaFRvZG9zLCBpIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vQ3JlYXRlIGEgbmV3IHByb2plY3Qgb2JqZWN0XG4vL3BhcmFtczogKHByb2plY3QgbmFtZSlcbi8vcmV0dXJuczogYSBuZXcgcHJvamVjdFxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdChwcm9qTmFtZSkge1xuICAgIGxldCB0aXRsZSA9IHByb2pOYW1lO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgY29uc29sZS5sb2coYEkgY3JlYXRlZCBhIHByb2plY3QgbmFtZWQgJHtwcm9qTmFtZX1gKTtcbiAgICBzYXZlVG9Mb2NhbCh7dGl0bGUsIGxpc3R9KTtcbiAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICByZXR1cm4ge3RpdGxlLCBsaXN0fTtcbn1cblxuLy9BZGQgYSB0b2RvIHRvIGEgcHJvamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBhZGRUb1Byb2plY3QodG9kbyxwcm9qKXtcbiAgICBwcm9qLmxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2oudGl0bGUpKS5zbGljZSgpO1xuICAgIHRvZG8uY3VyclByb2plY3ROYW1lID0gcHJvai50aXRsZTtcbiAgICBwcm9qLmxpc3QucHVzaCh0b2RvKTtcbiAgICBjb25zb2xlLmxvZyhgSSBhZGRlZCAke3RvZG8udGl0bGV9IHRvICR7cHJvai50aXRsZX0gYXJyYXlbb10gaXMgJHtwcm9qLmxpc3RbMF0udGl0bGV9YCk7XG4gICAgc2F2ZVRvTG9jYWwocHJvaik7XG59XG5cbi8vTW92ZSBhIHRvZG8gZnJvbSBvbmUgcHJvamVjdCB0byBhbm90aGVyOyBkZWxldGUgdGhlIHRvZG8gZnJvbSBvbGQgcHJvamVjdCwgYWRkIHRoZSB0b2RvIHRvIG5ldyBwcm9qZWN0XG4vL3BhcmFtczogKHRvZG8gb2JqZWN0LCB0by1tb3ZlLXRvIHByb2plY3Qgb2JqZWN0KVxuZnVuY3Rpb24gbW92ZVRvUHJvamVjdCh0b2RvLG5ld1Byb2plY3QpIHtcbiAgICBsZXQgb2xkUHJvamVjdCA9IHsndGl0bGUnOnRvZG8uY3VyclByb2plY3ROYW1lLCdsaXN0JzpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRvZG8uY3VyclByb2plY3ROYW1lKSl9O1xuICAgIGNvbnNvbGUubG9nKGBJJ20gYWJvdXQgdG8gZGVsZXRlIGZyb20gb2xkcHJvamVjdCAke29sZFByb2plY3QudGl0bGV9YCk7XG4gICAgZGVsZXRlVG9kbyh0b2RvLG9sZFByb2plY3QpO1xuICAgIGFkZFRvUHJvamVjdCh0b2RvLG5ld1Byb2plY3QpO1xuICBcbn1cblxuLy9TYXZlIGEgcHJvamVjdCB0byBsb2NhbFN0b3JhZ2Vcbi8vcGFyYW1zOiBwcm9qZWN0IG9iamVjdFxuZnVuY3Rpb24gc2F2ZVRvTG9jYWwocHJvamVjdCl7XG4gICAgY29uc29sZS5sb2coYEluIHRoZSBTYXZldG9Mb2NhbCBGdW5jdGlvbiBhbmQgcHJvamVjdCB0aXRsZSBpcyAke3Byb2plY3QudGl0bGV9IGFuZCBsaXN0IGlzICR7cHJvamVjdC5saXN0fWApO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2plY3QudGl0bGUsIEpTT04uc3RyaW5naWZ5KHByb2plY3QubGlzdCkpO1xufVxuXG4vL0VkaXRzIHRoZSB0b2RvIGFuZCBzYXZlcyBpdCB0byBsb2NhbFxuLy9wYXJtYXM6IGF0dHJpYnV0ZSB0byB1cGRhdGUsIHZhbHVlIHRvIGFzc2lnbiB0byBhdHRyaWJ1dGUsIG5hbWUgb2YgdG9kbywgbmFtZSBvZiBwcm9qZWN0XG4vLyBmdW5jdGlvbiBlZGl0VG9kbyhhdHRyaWJ1dGUsIG5ld1ZhbHVlLCB0b2RvTmFtZSwgcHJvak5hbWUpe1xuLy8gICAgIGxldCBzZWFyY2hSZXN1bHRzID0gbG9va3VwVG9kbyh0b2RvTmFtZSwgcHJvak5hbWUpO1xuLy8gICAgIHN3aXRjaCAoYXR0cmlidXRlKSB7XG4vLyAgICAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuLy8gICAgICAgICAgICAgc2VhcmNoUmVzdWx0cy5zZWFyY2hUb2Rvc1tzZWFyY2hSZXN1bHRzLmldLnRpdGxlID0gbmV3VmFsdWU7XG4vLyAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgY2FzZSBcImRlc2NyaXB0aW9uXCI6XG4vLyAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzLnNlYXJjaFRvZG9zW3NlYXJjaFJlc3VsdHMuaV0uZGVzY3JpcHRpb24gPSBuZXdWYWx1ZTtcbi8vICAgICAgICAgICAgIGJyZWFrO1xuLy8gICAgICAgICBjYXNlIFwiY3VyclByb2pOYW1lXCI6XG4vLyAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzLnNlYXJjaFRvZG9zW3NlYXJjaFJlc3VsdHMuaV0uY3VyclByb2plY3ROYW1lID0gbmV3VmFsdWU7XG4vLyAgICAgICAgICAgICBicmVhaztcbi8vICAgICB9XG5cbi8vICAgICBsZXQgbmV3TGlzdCA9IHNlYXJjaFJlc3VsdHMuc2VhcmNoVG9kb3Muc2xpY2UoKTtcbi8vICAgICBzYXZlVG9Mb2NhbCh7XCJ0aXRsZVwiOnByb2pOYW1lLCBcImxpc3RcIjpuZXdMaXN0fSk7XG4vLyB9XG5cbmZ1bmN0aW9uIGVkaXRUb2RvKHRvZG8pIHtcbiAgICBjb25zb2xlLmxvZyhgZWRpdFRvZG8gKCR7dG9kby50aXRsZX0sJHt0b2RvLmN1cnJQcm9qZWN0TmFtZX0sJHt0b2RvLmRlc2NyaXB0aW9ufSlgKTtcbiAgICBsZXQgcmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgdG9kby5jdXJyUHJvamVjdE5hbWUpO1xuICAgIGxldCBuZXdMaXN0ID0gcmVzdWx0cy5zZWFyY2hUb2Rvcy5zbGljZSgpO1xuICAgIGxldCBpID0gcmVzdWx0cy5pO1xuICAgIG5ld0xpc3RbaV0udGl0bGUgPSB0b2RvLnRpdGxlO1xuICAgIG5ld0xpc3RbaV0uZGVzY3JpcHRpb24gPSB0b2RvLmRlc2NyaXB0aW9uO1xuICAgIG5ld0xpc3RbaV0uY3VyclByb2plY3ROYW1lID0gdG9kby5jdXJyUHJvamVjdE5hbWU7XG5cbiAgICBsZXQgdXBkYXRlZFByb2plY3QgPSB7XCJ0aXRsZVwiOnRvZG8uY3VyclByb2plY3ROYW1lLFwibGlzdFwiOm5ld0xpc3R9O1xuICAgIHNhdmVUb0xvY2FsKHVwZGF0ZWRQcm9qZWN0KTtcbn1cblxuZXhwb3J0IHtcbiAgICBjcmVhdGVUb2RvLFxuICAgIGVkaXRUb2RvLFxuICAgIGxvb2t1cFRvZG8sXG4gICAgZGVsZXRlVG9kbyxcbiAgICBjcmVhdGVQcm9qZWN0LFxuICAgIGFkZFRvUHJvamVjdCxcbiAgICBtb3ZlVG9Qcm9qZWN0LFxuICAgIHNhdmVUb0xvY2FsXG59OyIsIi8vIGltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG4gaW1wb3J0ICogYXMgY3NzIGZyb20gXCIuL3N0eWxlLmNzc1wiO1xuIGltcG9ydCB7Y3JlYXRlVG9kbywgYWRkVG9Qcm9qZWN0LCBjcmVhdGVQcm9qZWN0LCBtb3ZlVG9Qcm9qZWN0LCBlZGl0VG9kbywgc2F2ZVRvTG9jYWwsIGRlbGV0ZVRvZG8sIGxvb2t1cFRvZG99IGZyb20gXCIuL2Z1bmN0aW9ucy5qc1wiO1xuXG5cbi8vTGlzdGVuIGZvciBuZXcgdG9kb3MgaW4gYSBnaXZlbiBwcm9qZWN0XG4vL3BhcmFtczogcHJvamVjdCBvYmplY3RcblxuZnVuY3Rpb24gbGlzdGVuKCl7XG4gICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGR0b2RvXCIpO1xuICAgIGNvbnN0IGlucHV0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpO1xuXG4gICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKTtcbiAgICAgICAgY29uc29sZS5sb2coYGxpc3RlbiBmdW5jdGlvbiAke3Byb2plY3RUaXRsZS50ZXh0Q29udGVudH1gKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHtcInRpdGxlXCI6cHJvamVjdFRpdGxlLnRleHRDb250ZW50LCBcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3RUaXRsZS50ZXh0Q29udGVudCkpLnNsaWNlKCl9O1xuICAgICAgICBhZGRUb1Byb2plY3QoY3JlYXRlVG9kbyhpbnB1dEJveC52YWx1ZSkscHJvamVjdCk7XG4gICAgICAgIGlucHV0Qm94LnZhbHVlID0gJyc7XG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2plY3QudGl0bGUpO1xuICAgIH0pO1xufVxuXG4vL0xpc3RlbiBmb3IgbmV3IHByb2plY3RzXG5mdW5jdGlvbiBsaXN0ZW5Gb3JOZXdQcm9qZWN0KCkge1xuICAgIGNvbnN0IGFkZFByb2pCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZHByb2plY3RidXR0XCIpO1xuICAgIGNvbnN0IGFkZFByb2pJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdG5hbWVcIik7XG5cbiAgICBhZGRQcm9qQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjcmVhdGVQcm9qZWN0KGFkZFByb2pJbnB1dC52YWx1ZSk7XG4gICAgICAgIGFkZFByb2pJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgfSk7XG59XG5cbi8vQWRkIGEgbGlzdGVuZXIgZm9yIGVhY2ggdG9kbyBsaXN0ZWQgdW5kZXIgYSBwcm9qZWN0XG4vL3BhcmFtczogKG5vZGUgY29udGFpbmluZyB0b2RvIDxsaT4sIHRpdGxlIG9mIHByb2plY3QpXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcih0b2RvSXRlbU5vZGUsIGRpc3BsYXlUb2RvTmFtZSwgcHJvalRpdGxlKSB7XG4gICAgXG4gICAgdG9kb0l0ZW1Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyBjb25zdCBleHBhbmRUb2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgLy8gZXhwYW5kVG9kby50ZXh0Q29udGVudCA9IFwiRWRpdFwiO1xuICAgICAgICBjb25zb2xlLmxvZyhgYWRkRXZlbnRMaXN0ZW5lciAoJHt0b2RvSXRlbU5vZGV9LCAke3Byb2pUaXRsZX0pYCk7XG5cbiAgICAgICAgZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCBkaXNwbGF5VG9kb05hbWUsIHByb2pUaXRsZSk7XG4gICAgICAgLy8gdG9kb0l0ZW0uYWZ0ZXIoZXhwYW5kVG9kbyk7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2codG9kb0l0ZW1Ob2RlKTtcbiAgICByZXR1cm4gdG9kb0l0ZW1Ob2RlO1xuXG59XG5cbi8vUmVwbGFjZSB0aGUgdG9kbyBpbiBwcm9qZWN0IGxpc3Qgd2l0aCBpbnB1dCBmaWVsZHMgc28gdXNlciBjYW4gZWRpdFxuLy9wYXJhbXM6IChub2RlIGNvbnRhaW5pbmcgdG9kbyA8bGk+LCB0aXRsZSBvZiBwcm9qZWN0KVxuZnVuY3Rpb24gZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCB0b2RvTmFtZSwgcHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgZWRpdE1vZGUgKCR7dG9kb05hbWUudGV4dENvbnRlbnR9LCAke3Byb2pUaXRsZX0pYCk7XG4gICAgY29uc3QgZm91bmRUb2RvID0gbG9va3VwVG9kbyh0b2RvTmFtZS50ZXh0Q29udGVudCwgcHJvalRpdGxlKTtcbiAgICBjb25zdCBpbmRleCA9IGZvdW5kVG9kby5pO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NcIik7XG4gICAgY29uc3QgZWRpdFRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY29uc3QgZWRpdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuICAgIGNvbnN0IGVkaXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTlBVVFwiKTtcbiAgICBjb25zdCBlZGl0Q3VyclByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0VMRUNUXCIpO1xuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gICAgZWRpdFRpdGxlLnZhbHVlID0gdG9kb05hbWUudGV4dENvbnRlbnQ7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHRcIik7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsXCJBZGQgVGl0bGVcIik7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJ0aXRsZUlucHV0XCIpO1xuXG4gICAgZWRpdERlc2NyaXB0aW9uLnZhbHVlID0gZm91bmRUb2RvLnNlYXJjaFRvZG9zW2luZGV4XS5kZXNjcmlwdGlvbjtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dFwiKTtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIixcIkFkZCBEZXNjcmlwdGlvblwiKTtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImRlc2NJbnB1dFwiKTtcblxuICAgIGVkaXRDdXJyUHJvamVjdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJzZWxlY3Qtb25lXCIpO1xuICAgIFxuICAgIE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkuZm9yRWFjaCggKGtleSkgPT4ge1xuXG4gICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBrZXk7XG4gICAgICAgIGVkaXRDdXJyUHJvamVjdC5hZGQob3B0aW9uKTtcbiAgICB9KVxuXG4gICAgZWRpdEN1cnJQcm9qZWN0LnZhbHVlID0gcHJvalRpdGxlO1xuXG4gICAgc2F2ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJidXR0b25cIik7XG4gICAgc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAgIHNhdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBub3cgd2UgY3JlYXRlIGEgdG9kbyB1c2luZyB0aGVzZSBwYXJhbXMgKCR7ZWRpdFRpdGxlLnZhbHVlfSAke3Byb2pUaXRsZX0gJHtlZGl0RGVzY3JpcHRpb24udmFsdWV9KWApO1xuICAgICAgICBsZXQgdXBkYXRlZFRvZG8gPSBjcmVhdGVUb2RvKGVkaXRUaXRsZS52YWx1ZSwgcHJvalRpdGxlLCBlZGl0RGVzY3JpcHRpb24udmFsdWUpO1xuICAgICAgICBsZXQgdXBkYXRlZFByb2plY3QgPSB7XCJ0aXRsZVwiOmVkaXRDdXJyUHJvamVjdC52YWx1ZSxcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGVkaXRDdXJyUHJvamVjdC52YWx1ZSkpfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGB1cGRhdGVkVG9kbyB0aXRsZSAke3VwZGF0ZWRUb2RvLnRpdGxlfSBjdXJyUHJvak5hbWUgJHt1cGRhdGVkVG9kby5jdXJyUHJvamVjdE5hbWV9IGRlc2MgJHt1cGRhdGVkVG9kby5kZXNjcmlwdGlvbn1gKTtcblxuICAgICAgICBpZiAoZWRpdEN1cnJQcm9qZWN0LnZhbHVlICE9PSBwcm9qVGl0bGUpIG1vdmVUb1Byb2plY3QodXBkYXRlZFRvZG8sIHVwZGF0ZWRQcm9qZWN0KTtcbiAgICAgICAgZWxzZSBlZGl0VG9kbyh1cGRhdGVkVG9kbyk7XG5cbiAgICAgICAgZGlzcGxheVByb2oocHJvalRpdGxlKTtcbiAgICAgICAgXG4gICAgfSk7XG5cblxuICAgIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0VGl0bGUpO1xuICAgIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0RGVzY3JpcHRpb24pO1xuICAgIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0Q3VyclByb2plY3QpO1xuICAgIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChzYXZlQnV0dG9uKTtcblxuICAgIGNvbnN0IHRvZG9MaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgdG9kb0xpc3RJdGVtLmFwcGVuZENoaWxkKGVkaXRUb2RvSXRlbSk7XG5cbiAgICBsaXN0LnJlcGxhY2VDaGlsZCh0b2RvTGlzdEl0ZW0sdG9kb0l0ZW1Ob2RlKTtcblxufVxuXG4vL2Rpc3BsYXkgYSBwcm9qZWN0IGFuZCBhbGwgb2YgaXRzIHRvZG9zXG4vL3BhcmFtczogcHJvamVjdCBvYmplY3RcbmZ1bmN0aW9uIGRpc3BsYXlQcm9qKHByb2pUaXRsZSl7XG5cbiAgICBsZXQgcHJvakxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2pUaXRsZSkpLnNsaWNlKCk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qbmFtZXNwYW5cIikudGV4dENvbnRlbnQgPSBwcm9qVGl0bGU7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2Rvc1wiKS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NcIik7XG5cbiAgICBmb3IobGV0IGkgPSAwOyBpPHByb2pMaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgZGlzcGxheVRvZG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaXNwbGF5VG9kb05hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgY29uc3QgZGlzcGxheVRvZG9EZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlDb2xvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBkaXNwbGF5VG9kb05hbWUudGV4dENvbnRlbnQgPSBwcm9qTGlzdFtpXS50aXRsZTtcbiAgICAgICAgZGlzcGxheVRvZG9EZXNjLnRleHRDb250ZW50ID0gcHJvakxpc3RbaV0uZGVzY3JpcHRpb247XG4gICAgICAgIGRpc3BsYXlDb2xvbi50ZXh0Q29udGVudCA9IFwiOiBcIjtcbiAgICAgICAgZGlzcGxheVRvZG8uYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9OYW1lKTtcbiAgICAgICAgZGlzcGxheVRvZG8uYXBwZW5kQ2hpbGQoZGlzcGxheUNvbG9uKTtcbiAgICAgICAgZGlzcGxheVRvZG8uYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9EZXNjKTtcbiAgICAgICAgY29uc3QgZGlzcGxheVRvZG9XaXRoTGlzdGVuZXIgPSBhZGRMaXN0ZW5lcihkaXNwbGF5VG9kbywgZGlzcGxheVRvZG9OYW1lLCBwcm9qVGl0bGUpO1xuICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGRpc3BsYXlUb2RvV2l0aExpc3RlbmVyKTtcbiAgICB9XG4gICAgXG59XG5cbi8vZGlzcGxheSBsaXN0IG9mIHByb2plY3RzIGluIHRoZSBzaWRlbmF2XG5mdW5jdGlvbiBkaXNwbGF5UHJvamVjdHMoKSB7XG5cbiAgICBjb25zdCBwcm9qTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamxpc3RcIik7XG4gICAgcHJvakxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgXG4gICAgT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKS5mb3JFYWNoKCAoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIHAudGV4dENvbnRlbnQgPSBrZXk7XG4gICAgICAgIHAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBkaXNwbGF5UHJvaihrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvakxpc3QuYXBwZW5kQ2hpbGQocCk7XG4gICAgfSk7XG5cbn1cblxuXG5jcmVhdGVQcm9qZWN0KFwiSW5ib3hcIik7XG5saXN0ZW4oKTtcbmxpc3RlbkZvck5ld1Byb2plY3QoKTtcblxuIGV4cG9ydCB7ZGlzcGxheVByb2plY3RzfTsiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiY3JlYXRlVG9kbyIsInRpdGxlIiwiY3VyclByb2plY3ROYW1lIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwibG9va3VwVG9kbyIsInRvZG9UaXRsZSIsInByb2pUaXRsZSIsImNvbnNvbGUiLCJsb2ciLCJzZWFyY2hUb2RvcyIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNsaWNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY3JlYXRlUHJvamVjdCIsInByb2pOYW1lIiwic2F2ZVRvTG9jYWwiLCJkaXNwbGF5UHJvamVjdHMiLCJhZGRUb1Byb2plY3QiLCJ0b2RvIiwicHJvaiIsInByb2plY3QiLCJzZXRJdGVtIiwiYWRkTGlzdGVuZXIiLCJ0b2RvSXRlbU5vZGUiLCJkaXNwbGF5VG9kb05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwidG9kb05hbWUiLCJ0ZXh0Q29udGVudCIsImZvdW5kVG9kbyIsImVkaXRUb2RvSXRlbSIsImVkaXRUaXRsZSIsImVkaXREZXNjcmlwdGlvbiIsImVkaXRDdXJyUHJvamVjdCIsInNhdmVCdXR0b24iLCJ2YWx1ZSIsImtleXMiLCJmb3JFYWNoIiwib3B0aW9uIiwiYWRkIiwidXBkYXRlZFRvZG8iLCJ1cGRhdGVkUHJvamVjdCIsIm5ld1Byb2plY3QiLCJvbGRQcm9qZWN0Iiwic2VhcmNoUmVzdWx0cyIsImRlbGV0ZVRvZG8iLCJtb3ZlVG9Qcm9qZWN0IiwicmVzdWx0cyIsImVkaXRUb2RvIiwiZGlzcGxheVByb2oiLCJ0b2RvTGlzdEl0ZW0iLCJyZXBsYWNlQ2hpbGQiLCJlZGl0TW9kZSIsInByb2pMaXN0IiwiZGlzcGxheVRvZG8iLCJkaXNwbGF5VG9kb0Rlc2MiLCJkaXNwbGF5Q29sb24iLCJkaXNwbGF5VG9kb1dpdGhMaXN0ZW5lciIsImlubmVySFRNTCIsInAiLCJsb2NhbHMiLCJhZGRCdXR0b24iLCJpbnB1dEJveCIsInByb2plY3RUaXRsZSIsImxpc3RlbiIsImFkZFByb2pCdXR0b24iLCJhZGRQcm9qSW5wdXQiLCJsaXN0ZW5Gb3JOZXdQcm9qZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==