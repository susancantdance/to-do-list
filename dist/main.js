(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(354),r=n.n(o),a=n(314),i=n.n(a)()(r());i.push([e.id,"input {\n    min-width: 0;\n}\n\n.reset {\n    all: unset;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n\n.container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n/* .titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n} */\n\n.todosheader {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n\n.todoname {\n    background-color: azure;\n}\n\n.header {\n    background-color: azure;\n}\n\n.todoslist {\n    display: flex;\n    flex-direction: column;\n}\n\n.singletodo {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,wBAAwB;IACxB,qBAAqB;IACrB,gBAAgB;EAClB;;AAEF;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;;;;;;GAMG;;AAEH;IACI,aAAa;IACb,qCAAqC;IACrC,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,uBAAuB;AAC3B",sourcesContent:["input {\n    min-width: 0;\n}\n\n.reset {\n    all: unset;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n  }\n\n.container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n/* .titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n} */\n\n.todosheader {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}\n\n.todoname {\n    background-color: azure;\n}\n\n.header {\n    background-color: azure;\n}\n\n.todoslist {\n    display: flex;\n    flex-direction: column;\n}\n\n.singletodo {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: 1fr;\n}"],sourceRoot:""}]);const c=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);o&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],d=o.base?l[0]+o.base:l[0],s=a[d]||0,u="".concat(d," ").concat(s);a[d]=s+1;var p=n(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=r(A,o);o.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var l=o(e,r),d=0;d<a.length;d++){var s=n(a[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{r:()=>x});var e=n(72),t=n.n(e),r=n(825),a=n.n(r),i=n(659),c=n.n(i),l=n(56),d=n.n(l),s=n(540),u=n.n(s),p=n(113),A=n.n(p),m=n(208),f={};function C(e,t,n="",o=0,r="",a="medium"){return console.log(`create todo ${t}`),{title:e,currProjectName:t,description:n,index:o,dueDate:r,priority:a}}function g(e,t){t.list.splice(e.index,1),h(t)}function v(e){let t=e,n=[];return console.log(`I created a project named ${e}`),h({title:t,list:n}),x(),{title:t,list:n}}function b(e,t){t.list=JSON.parse(localStorage.getItem(t.title)).slice(),e.currProjectName=t.title,e.index=t.list.length,t.list.push(e),console.log(`I added ${e.title} to ${t.title} the index is ${e.index} and title in array is ${t.list[e.index].title}`),h(t)}function h(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function I(e,t,n,o){return e.addEventListener("click",(()=>{console.log(`addEventListener (${e.textContent}, ${n})`),function(e,t,n,o){console.log(`editMode (${t.textContent}, ${n}, ${o})`);const r=JSON.parse(localStorage.getItem(n)).slice(),a=document.querySelector(".todoslist"),i=(document.createElement("span"),document.createElement("p"),document.createElement("INPUT")),c=document.createElement("INPUT"),l=document.createElement("INPUT"),d=function(e){const t=document.createElement("SELECT");t.setAttribute("placeholder","Add priority"),t.setAttribute("class","duedatePriority"),t.setAttribute("type","select-one");let n=document.createElement("option"),o=document.createElement("option"),r=document.createElement("option");return n.textContent="high",o.textContent="medium",r.textContent="low",t.add(n),t.add(o),t.add(r),t.value=e.priority,t}(r[o]),s=function(){const e=document.createElement("SELECT");return e.setAttribute("type","select-one"),Object.keys(localStorage).forEach((t=>{let n=document.createElement("option");n.textContent=t,e.add(n)})),e}();s.value=n;const u=document.createElement("button"),p=document.createElement("button");i.value=t.textContent,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Title"),i.setAttribute("class","titleInput"),i.setAttribute("width","1fr"),c.value=r[o].description,c.setAttribute("type","text"),c.setAttribute("placeholder","Add Description"),c.setAttribute("class","descInput"),l.value=r[o].dueDate,l.setAttribute("type","text"),l.setAttribute("placeholder","Add duedate"),l.setAttribute("class","duedateInput"),u.setAttribute("type","button"),u.textContent="Save",u.addEventListener("click",(()=>{console.log(`now we create a todo using these params (${i.value} ${n} ${c.value})`);let e=C(i.value,n,c.value,o,l.value,d.value),t={title:s.value,list:JSON.parse(localStorage.getItem(s.value))};console.log(`updatedTodo title ${e.title} currProjName ${e.currProjectName} desc ${e.description}`),s.value!==n?function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),g(e,n),b(e,t)}(e,t):function(e){console.log(`editTodo (${e.title},${e.currProjectName},${e.description},${e.index})`);let t=JSON.parse(localStorage.getItem(e.currProjectName)).slice(),n=e.index;t[n].title=e.title,t[n].description=e.description,t[n].dueDate=e.dueDate,t[n].priority=e.priority,t[n].currProjectName=e.currProjectName,h({title:e.currProjectName,list:t})}(e),y(n)})),p.setAttribute("type","button"),p.textContent="Delete",p.addEventListener("click",(()=>{g(C("",n,"",o),{title:n,list:JSON.parse(localStorage.getItem(n))}),y(n)}));const A=document.createElement("div");A.setAttribute("id","id"+o),A.setAttribute("class","singletodo reset"),A.appendChild(i),A.appendChild(c),A.appendChild(l),A.appendChild(d),A.appendChild(s),A.appendChild(u),A.appendChild(p),a.replaceChild(A,e)}(e,t,n,o)})),console.log(e),e}function y(e){console.log(`i'm in the display Proj function and projTitle is ${e}`);let t=JSON.parse(localStorage.getItem(e)).slice();document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e;const n=document.querySelector(".todoslist");null!==n&&(n.textContent="");for(let o=0;o<t.length;o++){const r=document.createElement("div"),a=document.createElement("span"),i=document.createElement("span"),c=document.createElement("span"),l=document.createElement("span"),d=document.createElement("span"),s=document.createElement("span");console.log(`currprojname is ${t[o].currProjectName}`),a.textContent=t[o].title,i.textContent=t[o].description,c.textContent=t[o].dueDate,l.textContent=t[o].priority,d.textContent=t[o].currProjectName,r.appendChild(a),r.appendChild(i),r.appendChild(c),r.appendChild(l),r.appendChild(d),r.appendChild(s),r.appendChild(s);const u=I(r,a,e,o);u.setAttribute("class","singletodo"),u.setAttribute("id","id"+o),n.appendChild(u)}}function x(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li"),o=document.createElement("span");let r=document.createElement("button");r.textContent="Delete",o.textContent=t,o.addEventListener("click",(()=>{y(t)})),r.addEventListener("click",(()=>{var e;e=t,localStorage.removeItem(e),y("Inbox"),x()})),n.appendChild(o),"Inbox"!==t&&n.appendChild(r),e.appendChild(n)}))}f.styleTagTransform=A(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(m.A,f),m.A&&m.A.locals&&m.A.locals,v("Inbox"),function(){const e=document.querySelector(".addtodo"),t=document.querySelector("#name");e.addEventListener("click",(()=>{const e=document.querySelector(".projnamespan");console.log(`listen function ${e.textContent}`);const n={title:e.textContent,list:JSON.parse(localStorage.getItem(e.textContent)).slice()};b(C(t.value,e.textContent),n),t.value="",y(n.title)}))}(),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{v(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFDakJmLEVBQVErQyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTL0MsR0FLSixLQUFXLElBQVFxSixRQUFTLElBQVFBLE9Fc1AxRDFELEVBQWMsU0F0UWQsV0FDSSxNQUFNMkQsRUFBWXhILFNBQVNDLGNBQWMsWUFDbkN3SCxFQUFXekgsU0FBU0MsY0FBYyxTQUV4Q3VILEVBQVU3QyxpQkFBaUIsU0FBUyxLQUNoQyxNQUFNK0MsRUFBZTFILFNBQVNDLGNBQWMsaUJBQzVDc0QsUUFBUUMsSUFBSSxtQkFBbUJrRSxFQUFhOUMsZUFDNUMsTUFBTWpCLEVBQVUsQ0FBQyxNQUFRK0QsRUFBYTlDLFlBQWEsS0FBT25ILEtBQUt5RyxNQUFNQyxhQUFhQyxRQUFRc0QsRUFBYTlDLGNBQWNQLFNBQ3JITCxFQUFhZixFQUFXd0UsRUFBU2pDLE1BQU1rQyxFQUFhOUMsYUFBYWpCLEdBQ2pFOEQsRUFBU2pDLE1BQVEsR0FDakJlLEVBQVk1QyxFQUFRVCxNQUFNLEdBRWxDLENBMlBBeUUsR0F4UEEsV0FDSSxNQUFNQyxFQUFnQjVILFNBQVNDLGNBQWMsbUJBQ3ZDNEgsRUFBZTdILFNBQVNDLGNBQWMsZ0JBRTVDMkgsRUFBY2pELGlCQUFpQixTQUFTLEtBQ3BDZCxFQUFjZ0UsRUFBYXJDLE9BQzNCcUMsRUFBYXJDLE1BQVEsRUFBRSxHQUcvQixDQWdQQXNDLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgaW5wdXQge1xuICAgIG1pbi13aWR0aDogMDtcbn1cblxuLnJlc2V0IHtcbiAgICBhbGw6IHVuc2V0O1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxuXG4uY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzAlIDcwJTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMCU7XG59XG5cbi5tYWluIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xufVxuXG4uc2lkZW5hdiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcbn1cblxuLnRpdGxlIHtcbiAgICBmb250LXNpemU6IDMwcHg7XG59XG5cbi5lbnRyeSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmVpZ2U7XG59XG5cbi5kaXNwbGF5YXJlYSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNSwgMTc5LCAyNDkpO1xufVxuXG4ucHJvamxpc3Qge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtnb2xkZW5yb2Q7XG59XG5cbmxpIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XG59XG5cbi8qIC50aXRsZUlucHV0IHtcbiAgICB3aWR0aDogNzVweDtcbn1cblxuLmRlc2NJbnB1dCB7XG4gICAgd2lkdGg6IDE1MHB4O1xufSAqL1xuXG4udG9kb3NoZWFkZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcbn1cblxuLnRvZG9uYW1lIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcbn1cblxuLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXp1cmU7XG59XG5cbi50b2Rvc2xpc3Qge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnNpbmdsZXRvZG8ge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHdCQUF3QjtJQUN4QixxQkFBcUI7SUFDckIsZ0JBQWdCO0VBQ2xCOztBQUVGO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5Qix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksb0NBQW9DO0FBQ3hDOztBQUVBO0lBQ0ksK0JBQStCO0FBQ25DOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLG1CQUFtQjtBQUN2Qjs7QUFFQTs7Ozs7O0dBTUc7O0FBRUg7SUFDSSxhQUFhO0lBQ2IscUNBQXFDO0lBQ3JDLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IscUNBQXFDO0lBQ3JDLHVCQUF1QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJpbnB1dCB7XFxuICAgIG1pbi13aWR0aDogMDtcXG59XFxuXFxuLnJlc2V0IHtcXG4gICAgYWxsOiB1bnNldDtcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICB9XFxuXFxuLmNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzAlIDcwJTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMDAlO1xcbn1cXG5cXG4ubWFpbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XFxufVxcblxcbi5zaWRlbmF2IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcXG59XFxuXFxuLnRpdGxlIHtcXG4gICAgZm9udC1zaXplOiAzMHB4O1xcbn1cXG5cXG4uZW50cnkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBiZWlnZTtcXG59XFxuXFxuLmRpc3BsYXlhcmVhIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIxNSwgMTc5LCAyNDkpO1xcbn1cXG5cXG4ucHJvamxpc3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ29sZGVucm9kO1xcbn1cXG5cXG5saSB7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XFxufVxcblxcbi8qIC50aXRsZUlucHV0IHtcXG4gICAgd2lkdGg6IDc1cHg7XFxufVxcblxcbi5kZXNjSW5wdXQge1xcbiAgICB3aWR0aDogMTUwcHg7XFxufSAqL1xcblxcbi50b2Rvc2hlYWRlciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDcsIDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xcbn1cXG5cXG4udG9kb25hbWUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcXG59XFxuXFxuLmhlYWRlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGF6dXJlO1xcbn1cXG5cXG4udG9kb3NsaXN0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnNpbmdsZXRvZG8ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg3LCAxZnIpO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIgaW1wb3J0IHtkaXNwbGF5UHJvamVjdHN9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbi8vY3JlYXRlIGEgbmV3IHRvZG8gb2JqZWN0XG4vL3BhcmFtczogKHRpdGxlIG9mIHRvZG8sY3VycmVudCBwcm9qZWN0IG5hbWUsIGRlc2NyaXB0aW9uLCBkdWVkYXRlKVxuZnVuY3Rpb24gY3JlYXRlVG9kbyh0aXRsZSwgY3VyclByb2plY3ROYW1lLCBkZXNjcmlwdGlvbiA9ICcnLCBpbmRleCA9IDAsIGR1ZURhdGUgPSAnJywgcHJpb3JpdHkgPSAnbWVkaXVtJykge1xuICAgIGNvbnNvbGUubG9nKGBjcmVhdGUgdG9kbyAke2N1cnJQcm9qZWN0TmFtZX1gKTtcbiAgICByZXR1cm4ge3RpdGxlLCBjdXJyUHJvamVjdE5hbWUsIGRlc2NyaXB0aW9uLCBpbmRleCwgZHVlRGF0ZSwgcHJpb3JpdHl9O1xufVxuXG4vL3JlbW92ZSBhIHRvZG8gb2JqZWN0IGZyb20gYSBwcm9qZWN0IG9iamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBkZWxldGVUb2RvKHRvZG8scHJvamVjdCl7XG4gICAgLy9jb25zb2xlLmxvZyhgSW4gRGVsZXRlVG9kbyBhbmQgcHJvamVjdCB0aXRsZSBpcyAke3Byb2oudGl0bGV9IGFuZCB0b2RvIGlzICR7dG9kby50aXRsZX1gKTtcbiAgICAvL2NvbnNvbGUubG9nKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvai50aXRsZSkpKTtcbiAgICAvLyBsZXQgc2VhcmNoUmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgcHJvamVjdC50aXRsZSk7XG4gICAgLy8gc2VhcmNoUmVzdWx0cy5zZWFyY2hUb2Rvcy5zcGxpY2Uoc2VhcmNoUmVzdWx0cy5pLDEpO1xuICAgIC8vIHByb2plY3QubGlzdCA9IHNlYXJjaFJlc3VsdHMuc2VhcmNoVG9kb3Muc2xpY2UoKTtcbiAgICBwcm9qZWN0Lmxpc3Quc3BsaWNlKHRvZG8uaW5kZXgsMSk7XG4gICAgc2F2ZVRvTG9jYWwocHJvamVjdCk7XG5cbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvamVjdChwcm9qVGl0bGUpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShwcm9qVGl0bGUpO1xufVxuXG4vL0ZpbmQgYSBzcGVjaWZpYyB0b2RvIGluIHRoZSBwcm9qZWN0IG9iamVjdCBsaXN0IHRvIG1hbmlwdWxhdGUgZnVydGhlclxuLy9wYXJhbXM6ICh0b2RvIHRpdGxlLCBwcm9qZWN0IHRpdGxlKVxuLy9yZXR1cm5zOiBhIG5ldyBvYmplY3QgdGhhdCBoYXMgdGhlIGxpc3QgJiB0aGUgaW5kZXggb2YgdG9kbyBpbiBxdWVzdGlvbiAoRE8gSSBORUVEIFRPIFJFVFVSTiBUSEUgTElTVD8pXG5mdW5jdGlvbiBsb29rdXBUb2RvKHRvZG9UaXRsZSwgcHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIGxvb2t1cFRvZG8gZnVuY3Rpb24gKCR7dG9kb1RpdGxlfSwgJHtwcm9qVGl0bGV9YCk7XG4gICAgbGV0IHNlYXJjaFRvZG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuICAgIGNvbnNvbGUubG9nKGBzZWFyY2hUb2Rvcy5sZW5ndGggaXMgJHtzZWFyY2hUb2Rvc30gYW5kIGlzIGFuIEFycmF5PyAke0FycmF5LmlzQXJyYXkoc2VhcmNoVG9kb3MpfWApO1xuICAgIFxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWFyY2hUb2Rvcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbiB0aGUgZm9yIGxvb3AnKTtcbiAgICAgICAgY29uc29sZS5sb2coYHNlYXJjaFRvZG9zW2ldIGlzICR7c2VhcmNoVG9kb3NbaV0udGl0bGV9IGFuZCBsZW5ndGggaXMgJHtzZWFyY2hUb2Rvcy5sZW5ndGh9IGFuZCB0b2RvVGl0bGUgaXMgJHt0b2RvVGl0bGV9YCk7XG4gICAgICAgIGlmKHNlYXJjaFRvZG9zW2ldLnRpdGxlID09IHRvZG9UaXRsZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgd2UgaGF2ZSBsb2NhdGVkIHRoZSB0b2RvIGl0ZW0gd2hpY2ggaXMgJHtzZWFyY2hUb2Rvc1tpXS50aXRsZX1gKTtcbiAgICAgICAgICAgIGxldCBmb3VuZFRvZG8gPSBzZWFyY2hUb2Rvc1tpXTtcbiAgICAgICAgICAgIHJldHVybiB7IHNlYXJjaFRvZG9zLCBpIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vQ3JlYXRlIGEgbmV3IHByb2plY3Qgb2JqZWN0XG4vL3BhcmFtczogKHByb2plY3QgbmFtZSlcbi8vcmV0dXJuczogYSBuZXcgcHJvamVjdFxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdChwcm9qTmFtZSkge1xuICAgIGxldCB0aXRsZSA9IHByb2pOYW1lO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgY29uc29sZS5sb2coYEkgY3JlYXRlZCBhIHByb2plY3QgbmFtZWQgJHtwcm9qTmFtZX1gKTtcbiAgICBzYXZlVG9Mb2NhbCh7dGl0bGUsIGxpc3R9KTtcbiAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICByZXR1cm4ge3RpdGxlLCBsaXN0fTtcbn1cblxuLy9BZGQgYSB0b2RvIHRvIGEgcHJvamVjdFxuLy9wYXJhbXM6ICh0b2RvIG9iamVjdCwgcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBhZGRUb1Byb2plY3QodG9kbyxwcm9qKXtcbiAgICBwcm9qLmxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2oudGl0bGUpKS5zbGljZSgpO1xuICAgIHRvZG8uY3VyclByb2plY3ROYW1lID0gcHJvai50aXRsZTtcbiAgICB0b2RvLmluZGV4ID0gcHJvai5saXN0Lmxlbmd0aDsgXG4gICAgcHJvai5saXN0LnB1c2godG9kbyk7XG4gICAgY29uc29sZS5sb2coYEkgYWRkZWQgJHt0b2RvLnRpdGxlfSB0byAke3Byb2oudGl0bGV9IHRoZSBpbmRleCBpcyAke3RvZG8uaW5kZXh9IGFuZCB0aXRsZSBpbiBhcnJheSBpcyAke3Byb2oubGlzdFt0b2RvLmluZGV4XS50aXRsZX1gKTtcbiAgICBzYXZlVG9Mb2NhbChwcm9qKTtcbn1cblxuLy9Nb3ZlIGEgdG9kbyBmcm9tIG9uZSBwcm9qZWN0IHRvIGFub3RoZXI7IGRlbGV0ZSB0aGUgdG9kbyBmcm9tIG9sZCBwcm9qZWN0LCBhZGQgdGhlIHRvZG8gdG8gbmV3IHByb2plY3Rcbi8vcGFyYW1zOiAodG9kbyBvYmplY3QsIHRvLW1vdmUtdG8gcHJvamVjdCBvYmplY3QpXG5mdW5jdGlvbiBtb3ZlVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCkge1xuICAgIGxldCBvbGRQcm9qZWN0ID0geyd0aXRsZSc6dG9kby5jdXJyUHJvamVjdE5hbWUsJ2xpc3QnOkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odG9kby5jdXJyUHJvamVjdE5hbWUpKX07XG4gICAgY29uc29sZS5sb2coYEknbSBhYm91dCB0byBkZWxldGUgZnJvbSBvbGRwcm9qZWN0ICR7b2xkUHJvamVjdC50aXRsZX1gKTtcbiAgICBkZWxldGVUb2RvKHRvZG8sb2xkUHJvamVjdCk7XG4gICAgYWRkVG9Qcm9qZWN0KHRvZG8sbmV3UHJvamVjdCk7XG4gIFxufVxuXG4vL1NhdmUgYSBwcm9qZWN0IHRvIGxvY2FsU3RvcmFnZVxuLy9wYXJhbXM6IHByb2plY3Qgb2JqZWN0XG5mdW5jdGlvbiBzYXZlVG9Mb2NhbChwcm9qZWN0KXtcbiAgICBjb25zb2xlLmxvZyhgSW4gdGhlIFNhdmV0b0xvY2FsIEZ1bmN0aW9uIGFuZCBwcm9qZWN0IHRpdGxlIGlzICR7cHJvamVjdC50aXRsZX0gYW5kIGxpc3QgaXMgJHtwcm9qZWN0Lmxpc3R9YCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvamVjdC50aXRsZSwgSlNPTi5zdHJpbmdpZnkocHJvamVjdC5saXN0KSk7XG59XG5cblxuLy9FZGl0cyB0b2RvIGFuZCBzYXZlcyB0byBsb2NhbFxuLy9wYXJhbXM6IHRvZG8gb2JqZWN0XG5mdW5jdGlvbiBlZGl0VG9kbyh0b2RvKSB7XG4gICAgY29uc29sZS5sb2coYGVkaXRUb2RvICgke3RvZG8udGl0bGV9LCR7dG9kby5jdXJyUHJvamVjdE5hbWV9LCR7dG9kby5kZXNjcmlwdGlvbn0sJHt0b2RvLmluZGV4fSlgKTtcbiAgICAvLyBsZXQgcmVzdWx0cyA9IGxvb2t1cFRvZG8odG9kby50aXRsZSwgdG9kby5jdXJyUHJvamVjdE5hbWUpO1xuICAgIC8vIGxldCBuZXdMaXN0ID0gcmVzdWx0cy5zZWFyY2hUb2Rvcy5zbGljZSgpO1xuICAgIGxldCBuZXdMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0b2RvLmN1cnJQcm9qZWN0TmFtZSkpLnNsaWNlKCk7XG4gICAgbGV0IGkgPSB0b2RvLmluZGV4O1xuICAgIG5ld0xpc3RbaV0udGl0bGUgPSB0b2RvLnRpdGxlO1xuICAgIG5ld0xpc3RbaV0uZGVzY3JpcHRpb24gPSB0b2RvLmRlc2NyaXB0aW9uO1xuICAgIG5ld0xpc3RbaV0uZHVlRGF0ZSA9IHRvZG8uZHVlRGF0ZTtcbiAgICBuZXdMaXN0W2ldLnByaW9yaXR5ID0gdG9kby5wcmlvcml0eTtcbiAgICBuZXdMaXN0W2ldLmN1cnJQcm9qZWN0TmFtZSA9IHRvZG8uY3VyclByb2plY3ROYW1lO1xuXG4gICAgbGV0IHVwZGF0ZWRQcm9qZWN0ID0ge1widGl0bGVcIjp0b2RvLmN1cnJQcm9qZWN0TmFtZSxcImxpc3RcIjpuZXdMaXN0fTtcbiAgICBzYXZlVG9Mb2NhbCh1cGRhdGVkUHJvamVjdCk7XG59XG5cbmV4cG9ydCB7XG4gICAgY3JlYXRlVG9kbyxcbiAgICBlZGl0VG9kbyxcbiAgICBsb29rdXBUb2RvLFxuICAgIGRlbGV0ZVRvZG8sXG4gICAgY3JlYXRlUHJvamVjdCxcbiAgICBhZGRUb1Byb2plY3QsXG4gICAgbW92ZVRvUHJvamVjdCxcbiAgICBzYXZlVG9Mb2NhbCxcbiAgICBkZWxldGVQcm9qZWN0XG59OyIsIi8vIGltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG4gaW1wb3J0ICogYXMgY3NzIGZyb20gXCIuL3N0eWxlLmNzc1wiO1xuIGltcG9ydCB7Y3JlYXRlVG9kbywgZGVsZXRlUHJvamVjdCwgYWRkVG9Qcm9qZWN0LCBjcmVhdGVQcm9qZWN0LCBtb3ZlVG9Qcm9qZWN0LCBlZGl0VG9kbywgc2F2ZVRvTG9jYWwsIGRlbGV0ZVRvZG8sIGxvb2t1cFRvZG99IGZyb20gXCIuL2Z1bmN0aW9ucy5qc1wiO1xuXG5cbi8vTGlzdGVuIGZvciBuZXcgdG9kb3MgaW4gYSBnaXZlbiBwcm9qZWN0XG4vL3BhcmFtczogcHJvamVjdCBvYmplY3RcblxuZnVuY3Rpb24gbGlzdGVuKCl7XG4gICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGR0b2RvXCIpO1xuICAgIGNvbnN0IGlucHV0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lXCIpO1xuXG4gICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKTtcbiAgICAgICAgY29uc29sZS5sb2coYGxpc3RlbiBmdW5jdGlvbiAke3Byb2plY3RUaXRsZS50ZXh0Q29udGVudH1gKTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHtcInRpdGxlXCI6cHJvamVjdFRpdGxlLnRleHRDb250ZW50LCBcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3RUaXRsZS50ZXh0Q29udGVudCkpLnNsaWNlKCl9O1xuICAgICAgICBhZGRUb1Byb2plY3QoY3JlYXRlVG9kbyhpbnB1dEJveC52YWx1ZSxwcm9qZWN0VGl0bGUudGV4dENvbnRlbnQpLHByb2plY3QpO1xuICAgICAgICBpbnB1dEJveC52YWx1ZSA9ICcnO1xuICAgICAgICBkaXNwbGF5UHJvaihwcm9qZWN0LnRpdGxlKTtcbiAgICB9KTtcbn1cblxuLy9MaXN0ZW4gZm9yIG5ldyBwcm9qZWN0c1xuZnVuY3Rpb24gbGlzdGVuRm9yTmV3UHJvamVjdCgpIHtcbiAgICBjb25zdCBhZGRQcm9qQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRwcm9qZWN0YnV0dFwiKTtcbiAgICBjb25zdCBhZGRQcm9qSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3RuYW1lXCIpO1xuXG4gICAgYWRkUHJvakJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY3JlYXRlUHJvamVjdChhZGRQcm9qSW5wdXQudmFsdWUpO1xuICAgICAgICBhZGRQcm9qSW5wdXQudmFsdWUgPSAnJztcblxuICAgIH0pO1xufVxuXG4vL0FkZCBhIGxpc3RlbmVyIGZvciBlYWNoIHRvZG8gbGlzdGVkIHVuZGVyIGEgcHJvamVjdFxuLy9wYXJhbXM6IChub2RlIGNvbnRhaW5pbmcgdG9kbyA8bGk+LCB0aXRsZSBvZiBwcm9qZWN0KVxuZnVuY3Rpb24gYWRkTGlzdGVuZXIodG9kb0l0ZW1Ob2RlLCBkaXNwbGF5VG9kb05hbWUsIHByb2pUaXRsZSwgaSkge1xuICAgIFxuICAgIHRvZG9JdGVtTm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgLy8gY29uc3QgZXhwYW5kVG9kbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIC8vIGV4cGFuZFRvZG8udGV4dENvbnRlbnQgPSBcIkVkaXRcIjtcbiAgICAgICAgY29uc29sZS5sb2coYGFkZEV2ZW50TGlzdGVuZXIgKCR7dG9kb0l0ZW1Ob2RlLnRleHRDb250ZW50fSwgJHtwcm9qVGl0bGV9KWApO1xuXG4gICAgICAgIGVkaXRNb2RlKHRvZG9JdGVtTm9kZSwgZGlzcGxheVRvZG9OYW1lLCBwcm9qVGl0bGUsIGkpO1xuICAgICAgIC8vIHRvZG9JdGVtLmFmdGVyKGV4cGFuZFRvZG8pO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHRvZG9JdGVtTm9kZSk7XG4gICAgcmV0dXJuIHRvZG9JdGVtTm9kZTtcblxufVxuXG5mdW5jdGlvbiBlZGl0VG9kb1ByaW9yaXR5KHRvZG8pIHtcbiAgICBjb25zdCBkcm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTRUxFQ1RcIik7XG4gICAgZHJvcGRvd24uc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIixcIkFkZCBwcmlvcml0eVwiKTtcbiAgICBkcm9wZG93bi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwiZHVlZGF0ZVByaW9yaXR5XCIpO1xuICAgIGRyb3Bkb3duLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInNlbGVjdC1vbmVcIik7XG5cbiAgICBsZXQgaGlnaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgbGV0IG1lZGl1bSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgbGV0IGxvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cbiAgICBoaWdoLnRleHRDb250ZW50ID0gXCJoaWdoXCI7XG4gICAgbWVkaXVtLnRleHRDb250ZW50ID0gXCJtZWRpdW1cIjtcbiAgICBsb3cudGV4dENvbnRlbnQgPSBcImxvd1wiO1xuXG4gICAgZHJvcGRvd24uYWRkKGhpZ2gpO1xuICAgIGRyb3Bkb3duLmFkZChtZWRpdW0pO1xuICAgIGRyb3Bkb3duLmFkZChsb3cpO1xuXG4gICAgZHJvcGRvd24udmFsdWUgPSB0b2RvLnByaW9yaXR5O1xuICAgIHJldHVybiBkcm9wZG93bjtcbn1cblxuZnVuY3Rpb24gZWRpdFRvZG9DdXJyUHJvamVjdCgpIHtcbiAgICBjb25zdCB0b2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIlNFTEVDVFwiKTtcbiAgICB0b2RvLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInNlbGVjdC1vbmVcIik7XG4gICAgXG4gICAgT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKS5mb3JFYWNoKCAoa2V5KSA9PiB7XG5cbiAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGtleTtcbiAgICAgICAgdG9kby5hZGQob3B0aW9uKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0b2RvO1xuXG59XG5cbi8vUmVwbGFjZSB0aGUgdG9kbyBpbiBwcm9qZWN0IGxpc3Qgd2l0aCBpbnB1dCBmaWVsZHMgc28gdXNlciBjYW4gZWRpdFxuLy9wYXJhbXM6IChub2RlIGNvbnRhaW5pbmcgdG9kbyA8bGk+LCB0aXRsZSBvZiBwcm9qZWN0KVxuZnVuY3Rpb24gZWRpdE1vZGUodG9kb0l0ZW1Ob2RlLCB0b2RvTmFtZSwgcHJvalRpdGxlLCBpKXtcbiAgICBjb25zb2xlLmxvZyhgZWRpdE1vZGUgKCR7dG9kb05hbWUudGV4dENvbnRlbnR9LCAke3Byb2pUaXRsZX0sICR7aX0pYCk7XG4gICAgLy8gY29uc3QgZm91bmRUb2RvID0gbG9va3VwVG9kbyh0b2RvTmFtZS50ZXh0Q29udGVudCwgcHJvalRpdGxlKTtcbiAgICAvLyBjb25zdCBpbmRleCA9IGZvdW5kVG9kby5pO1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qVGl0bGUpKS5zbGljZSgpO1xuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9kb3NsaXN0XCIpO1xuXG5cbiAgICBjb25zdCBlZGl0VG9kb0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBjb25zdCBsaW5lQnJlYWsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBjb25zdCBlZGl0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiSU5QVVRcIik7XG4gICAgY29uc3QgZWRpdERlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuICAgIGNvbnN0IGVkaXREdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklOUFVUXCIpO1xuXG5cbiAgICBjb25zdCBlZGl0UHJpb3JpdHkgPSBlZGl0VG9kb1ByaW9yaXR5KHByb2plY3RMaXN0W2ldKTtcbiAgICBjb25zdCBlZGl0Q3VyclByb2plY3QgPSBlZGl0VG9kb0N1cnJQcm9qZWN0KCk7XG4gICAgZWRpdEN1cnJQcm9qZWN0LnZhbHVlID0gcHJvalRpdGxlO1xuICAgIFxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cbiAgICBlZGl0VGl0bGUudmFsdWUgPSB0b2RvTmFtZS50ZXh0Q29udGVudDtcbiAgICBlZGl0VGl0bGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dFwiKTtcbiAgICBlZGl0VGl0bGUuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIixcIkFkZCBUaXRsZVwiKTtcbiAgICBlZGl0VGl0bGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcInRpdGxlSW5wdXRcIik7XG4gICAgZWRpdFRpdGxlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsXCIxZnJcIik7XG5cbiAgICBlZGl0RGVzY3JpcHRpb24udmFsdWUgPSBwcm9qZWN0TGlzdFtpXS5kZXNjcmlwdGlvbjtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dFwiKTtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIixcIkFkZCBEZXNjcmlwdGlvblwiKTtcbiAgICBlZGl0RGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImRlc2NJbnB1dFwiKTtcbiAgICBcbiAgICBlZGl0RHVlRGF0ZS52YWx1ZSA9IHByb2plY3RMaXN0W2ldLmR1ZURhdGU7XG4gICAgZWRpdER1ZURhdGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwidGV4dFwiKTtcbiAgICBlZGl0RHVlRGF0ZS5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLFwiQWRkIGR1ZWRhdGVcIik7XG4gICAgZWRpdER1ZURhdGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImR1ZWRhdGVJbnB1dFwiKTtcblxuICAgIFxuXG4gICAgc2F2ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJidXR0b25cIik7XG4gICAgc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xuICAgIHNhdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBub3cgd2UgY3JlYXRlIGEgdG9kbyB1c2luZyB0aGVzZSBwYXJhbXMgKCR7ZWRpdFRpdGxlLnZhbHVlfSAke3Byb2pUaXRsZX0gJHtlZGl0RGVzY3JpcHRpb24udmFsdWV9KWApO1xuICAgICAgICBsZXQgdXBkYXRlZFRvZG8gPSBjcmVhdGVUb2RvKGVkaXRUaXRsZS52YWx1ZSwgcHJvalRpdGxlLCBlZGl0RGVzY3JpcHRpb24udmFsdWUsIGksIGVkaXREdWVEYXRlLnZhbHVlLCBlZGl0UHJpb3JpdHkudmFsdWUpO1xuICAgICAgICBsZXQgdXBkYXRlZFByb2plY3QgPSB7XCJ0aXRsZVwiOmVkaXRDdXJyUHJvamVjdC52YWx1ZSxcImxpc3RcIjpKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGVkaXRDdXJyUHJvamVjdC52YWx1ZSkpfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGB1cGRhdGVkVG9kbyB0aXRsZSAke3VwZGF0ZWRUb2RvLnRpdGxlfSBjdXJyUHJvak5hbWUgJHt1cGRhdGVkVG9kby5jdXJyUHJvamVjdE5hbWV9IGRlc2MgJHt1cGRhdGVkVG9kby5kZXNjcmlwdGlvbn1gKTtcblxuICAgICAgICBpZiAoZWRpdEN1cnJQcm9qZWN0LnZhbHVlICE9PSBwcm9qVGl0bGUpIG1vdmVUb1Byb2plY3QodXBkYXRlZFRvZG8sIHVwZGF0ZWRQcm9qZWN0KTtcbiAgICAgICAgZWxzZSBlZGl0VG9kbyh1cGRhdGVkVG9kbyk7XG5cbiAgICAgICAgZGlzcGxheVByb2oocHJvalRpdGxlKTtcbiAgICAgICAgXG4gICAgfSk7XG5cbiAgICBkZWxldGVCdXR0b24uc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiYnV0dG9uXCIpO1xuICAgIGRlbGV0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRGVsZXRlXCI7XG4gICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBsZXQgdG9kb1RvRGVsZXRlID0gY3JlYXRlVG9kbygnJywgcHJvalRpdGxlLCAnJywgaSk7XG4gICAgICAgIGxldCBwcm9qZWN0VG9EZWxldGVGcm9tID0ge1widGl0bGVcIjpwcm9qVGl0bGUsIFwibGlzdFwiOkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvalRpdGxlKSl9O1xuICAgICAgICBkZWxldGVUb2RvKHRvZG9Ub0RlbGV0ZSwgcHJvamVjdFRvRGVsZXRlRnJvbSk7XG4gICAgICAgIGRpc3BsYXlQcm9qKHByb2pUaXRsZSk7XG4gICAgfSk7XG5cblxuICAgIC8vIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0VGl0bGUpO1xuXG4gICAgLy8gZWRpdFRvZG9JdGVtLmFwcGVuZENoaWxkKGVkaXREZXNjcmlwdGlvbik7XG5cbiAgICAvLyBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZWRpdER1ZURhdGUpO1xuICAgIC8vIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0UHJpb3JpdHkpO1xuICAgIC8vIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0Q3VyclByb2plY3QpO1xuICAgIC8vIGVkaXRUb2RvSXRlbS5hcHBlbmRDaGlsZChzYXZlQnV0dG9uKTtcbiAgICAvLyBlZGl0VG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcblxuICAgICBjb25zdCBlZGl0RmllbGRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgZWRpdEZpZWxkcy5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwiaWRcIitpKTtcbiAgICAgZWRpdEZpZWxkcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwic2luZ2xldG9kbyByZXNldFwiKTtcblxuXG4gICAgLy8gdG9kb0xpc3RJdGVtLmFwcGVuZENoaWxkKGVkaXRUb2RvSXRlbSk7XG4gICAgZWRpdEZpZWxkcy5hcHBlbmRDaGlsZChlZGl0VGl0bGUpO1xuICAgIGVkaXRGaWVsZHMuYXBwZW5kQ2hpbGQoZWRpdERlc2NyaXB0aW9uKTtcbiAgICBlZGl0RmllbGRzLmFwcGVuZENoaWxkKGVkaXREdWVEYXRlKTtcbiAgICBlZGl0RmllbGRzLmFwcGVuZENoaWxkKGVkaXRQcmlvcml0eSk7XG4gICAgZWRpdEZpZWxkcy5hcHBlbmRDaGlsZChlZGl0Q3VyclByb2plY3QpO1xuICAgIGVkaXRGaWVsZHMuYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XG4gICAgZWRpdEZpZWxkcy5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xuXG4gICAgbGlzdC5yZXBsYWNlQ2hpbGQoZWRpdEZpZWxkcyx0b2RvSXRlbU5vZGUpO1xuXG4gIFxuXG59XG5cbi8vZGlzcGxheSBhIHByb2plY3QgYW5kIGFsbCBvZiBpdHMgdG9kb3Ncbi8vcGFyYW1zOiBwcm9qZWN0IG9iamVjdFxuZnVuY3Rpb24gZGlzcGxheVByb2oocHJvalRpdGxlKXtcbiAgICBjb25zb2xlLmxvZyhgaSdtIGluIHRoZSBkaXNwbGF5IFByb2ogZnVuY3Rpb24gYW5kIHByb2pUaXRsZSBpcyAke3Byb2pUaXRsZX1gKTtcbiAgICBsZXQgcHJvakxpc3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2pUaXRsZSkpLnNsaWNlKCk7XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2puYW1lc3BhblwiKS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qbmFtZXNwYW5cIikudGV4dENvbnRlbnQgPSBwcm9qVGl0bGU7XG5cbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2Rvc2xpc3RcIik7XG4gICAgaWYobGlzdCAhPT0gbnVsbCkgbGlzdC50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBmb3IobGV0IGkgPSAwOyBpPHByb2pMaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgdG9kb0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIC8vdG9kb0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwic2luZ2xldG9kb1wiKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBkaXNwbGF5VG9kb05hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgY29uc3QgZGlzcGxheVRvZG9EZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBjb25zdCBkaXNwbGF5VG9kb1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvUHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBjb25zdCBidXR0b25QbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYGN1cnJwcm9qbmFtZSBpcyAke3Byb2pMaXN0W2ldLmN1cnJQcm9qZWN0TmFtZX1gKTtcbiAgICAgICAgZGlzcGxheVRvZG9OYW1lLnRleHRDb250ZW50ID0gcHJvakxpc3RbaV0udGl0bGU7XG4gICAgICAgIGRpc3BsYXlUb2RvRGVzYy50ZXh0Q29udGVudCA9IHByb2pMaXN0W2ldLmRlc2NyaXB0aW9uO1xuICAgICAgICBkaXNwbGF5VG9kb0R1ZURhdGUudGV4dENvbnRlbnQgPSBwcm9qTGlzdFtpXS5kdWVEYXRlO1xuICAgICAgICBkaXNwbGF5VG9kb1ByaW9yaXR5LnRleHRDb250ZW50ID0gcHJvakxpc3RbaV0ucHJpb3JpdHk7XG4gICAgICAgIGRpc3BsYXlUb2RvUHJvamVjdC50ZXh0Q29udGVudCA9IHByb2pMaXN0W2ldLmN1cnJQcm9qZWN0TmFtZTtcbiAgICAgICAgXG4gICAgXG4gICAgICAgXG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9OYW1lKTtcbiAgICAgICAgdG9kb0NvbnRhaW5lci5hcHBlbmRDaGlsZChkaXNwbGF5VG9kb0Rlc2MpO1xuICAgICAgICB0b2RvQ29udGFpbmVyLmFwcGVuZENoaWxkKGRpc3BsYXlUb2RvRHVlRGF0ZSk7XG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9Qcmlvcml0eSk7XG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9Qcm9qZWN0KTtcbiAgICAgICAgdG9kb0NvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25QbGFjZWhvbGRlcik7XG4gICAgICAgIHRvZG9Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uUGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGNvbnN0IGRpc3BsYXlUb2RvV2l0aExpc3RlbmVyID0gYWRkTGlzdGVuZXIodG9kb0NvbnRhaW5lciwgZGlzcGxheVRvZG9OYW1lLCBwcm9qVGl0bGUsIGkpO1xuICAgICAgICBkaXNwbGF5VG9kb1dpdGhMaXN0ZW5lci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLFwic2luZ2xldG9kb1wiKTtcbiAgICAgICAgZGlzcGxheVRvZG9XaXRoTGlzdGVuZXIuc2V0QXR0cmlidXRlKFwiaWRcIixcImlkXCIraSk7XG4gICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZG9XaXRoTGlzdGVuZXIpO1xuICAgIH1cbiAgICBcbn1cblxuLy9kaXNwbGF5IGxpc3Qgb2YgcHJvamVjdHMgaW4gdGhlIHNpZGVuYXZcbmZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0cygpIHtcblxuICAgIGNvbnN0IHByb2pMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qbGlzdFwiKTtcbiAgICBwcm9qTGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICBcbiAgICBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpLmZvckVhY2goIChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgbGV0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRGVsZXRlXCI7XG5cbiAgICAgICAgcC50ZXh0Q29udGVudCA9IGtleTtcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGRpc3BsYXlQcm9qKGtleSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZVByb2plY3Qoa2V5KTtcbiAgICAgICAgICAgIGRpc3BsYXlQcm9qKFwiSW5ib3hcIik7XG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXG4gICAgICAgIGxpLmFwcGVuZENoaWxkKHApO1xuICAgICAgICBpZihrZXkgIT09IFwiSW5ib3hcIikgbGkuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcbiAgICAgICAgcHJvakxpc3QuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICBcbiAgICB9KTtcblxufVxuXG5cbmNyZWF0ZVByb2plY3QoXCJJbmJveFwiKTtcbmxpc3RlbigpO1xubGlzdGVuRm9yTmV3UHJvamVjdCgpO1xuXG4gZXhwb3J0IHtkaXNwbGF5UHJvamVjdHN9OyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJjcmVhdGVUb2RvIiwidGl0bGUiLCJjdXJyUHJvamVjdE5hbWUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNvbnNvbGUiLCJsb2ciLCJkZWxldGVUb2RvIiwidG9kbyIsInByb2plY3QiLCJzYXZlVG9Mb2NhbCIsImNyZWF0ZVByb2plY3QiLCJwcm9qTmFtZSIsImRpc3BsYXlQcm9qZWN0cyIsImFkZFRvUHJvamVjdCIsInByb2oiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzbGljZSIsInNldEl0ZW0iLCJhZGRMaXN0ZW5lciIsInRvZG9JdGVtTm9kZSIsImRpc3BsYXlUb2RvTmFtZSIsInByb2pUaXRsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0ZXh0Q29udGVudCIsInRvZG9OYW1lIiwicHJvamVjdExpc3QiLCJlZGl0VGl0bGUiLCJlZGl0RGVzY3JpcHRpb24iLCJlZGl0RHVlRGF0ZSIsImVkaXRQcmlvcml0eSIsImRyb3Bkb3duIiwiaGlnaCIsIm1lZGl1bSIsImxvdyIsImFkZCIsInZhbHVlIiwiZWRpdFRvZG9Qcmlvcml0eSIsImVkaXRDdXJyUHJvamVjdCIsImtleXMiLCJmb3JFYWNoIiwib3B0aW9uIiwiZWRpdFRvZG9DdXJyUHJvamVjdCIsInNhdmVCdXR0b24iLCJkZWxldGVCdXR0b24iLCJ1cGRhdGVkVG9kbyIsInVwZGF0ZWRQcm9qZWN0IiwibmV3UHJvamVjdCIsIm9sZFByb2plY3QiLCJtb3ZlVG9Qcm9qZWN0IiwiZWRpdFRvZG8iLCJkaXNwbGF5UHJvaiIsImVkaXRGaWVsZHMiLCJyZXBsYWNlQ2hpbGQiLCJlZGl0TW9kZSIsInByb2pMaXN0IiwidG9kb0NvbnRhaW5lciIsImRpc3BsYXlUb2RvRGVzYyIsImRpc3BsYXlUb2RvRHVlRGF0ZSIsImRpc3BsYXlUb2RvUHJpb3JpdHkiLCJkaXNwbGF5VG9kb1Byb2plY3QiLCJidXR0b25QbGFjZWhvbGRlciIsImRpc3BsYXlUb2RvV2l0aExpc3RlbmVyIiwiaW5uZXJIVE1MIiwibGkiLCJwIiwicmVtb3ZlSXRlbSIsImxvY2FscyIsImFkZEJ1dHRvbiIsImlucHV0Qm94IiwicHJvamVjdFRpdGxlIiwibGlzdGVuIiwiYWRkUHJvakJ1dHRvbiIsImFkZFByb2pJbnB1dCIsImxpc3RlbkZvck5ld1Byb2plY3QiXSwic291cmNlUm9vdCI6IiJ9