(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),a=n(314),c=n.n(a)()(r());c.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    grid-template-rows: 100%;\n}\n\n.main {\n    background-color: aqua;\n}\n\n.sidenav {\n    background-color: pink;\n}\n\n.title {\n    font-size: 30px;\n}\n\n.entry {\n    background-color: beige;\n}\n\n.displayarea {\n    background-color: rgb(215, 179, 249);\n}\n\n.projlist {\n    background-color: darkgoldenrod;\n}\n\nli {\n    border-style: solid;\n    border-color: black;\n}\n\n.titleInput {\n    width: 75px;\n}\n\n.descInput {\n    width: 150px;\n}"],sourceRoot:""}]);const i=c},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(c[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var l=e[i],s=o.base?l[0]+o.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:A,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var l=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o={};(()=>{n.d(o,{r:()=>x});var e=n(72),t=n.n(e),r=n(825),a=n.n(r),c=n(659),i=n.n(c),l=n(56),s=n.n(l),d=n(540),u=n.n(d),p=n(113),m=n.n(p),A=n(208),f={};function v(e,t,n="",o=0,r="",a="medium"){return{title:e,currProjectName:t,description:n,index:o,dueDate:r,priority:a}}function g(e,t){t.list.splice(e.index,1),h(t)}function C(e){let t=e,n=[];return console.log(`I created a project named ${e}`),h({title:t,list:n}),x(),{title:t,list:n}}function y(e,t){t.list=JSON.parse(localStorage.getItem(t.title)).slice(),e.currProjectName=t.title,e.index=t.list.length,t.list.push(e),console.log(`I added ${e.title} to ${t.title} the index is ${e.index} and title in array is ${t.list[e.index].title}`),h(t)}function h(e){console.log(`In the SavetoLocal Function and project title is ${e.title} and list is ${e.list}`),localStorage.setItem(e.title,JSON.stringify(e.list))}function b(e,t,n,o){return e.addEventListener("click",(()=>{console.log(`addEventListener (${e}, ${n})`),function(e,t,n,o){console.log(`editMode (${t.textContent}, ${n}, ${o})`);const r=JSON.parse(localStorage.getItem(n)).slice(),a=document.querySelector(".todos"),c=document.createElement("span"),i=document.createElement("INPUT"),l=document.createElement("INPUT"),s=document.createElement("INPUT"),d=document.createElement("SELECT"),u=document.createElement("SELECT"),p=document.createElement("button"),m=document.createElement("button");i.value=t.textContent,i.setAttribute("type","text"),i.setAttribute("placeholder","Add Title"),i.setAttribute("class","titleInput"),l.value=r[o].description,l.setAttribute("type","text"),l.setAttribute("placeholder","Add Description"),l.setAttribute("class","descInput"),s.value=r[o].dueDate,s.setAttribute("type","text"),s.setAttribute("placeholder","Add duedate"),s.setAttribute("class","duedateInput"),d.setAttribute("placeholder","Add priority"),d.setAttribute("class","duedatePriority"),d.setAttribute("type","select-one");let A=document.createElement("option"),f=document.createElement("option"),C=document.createElement("option");A.textContent="high",f.textContent="medium",C.textContent="low",d.add(A),d.add(f),d.add(C),d.value=r[o].priority,u.setAttribute("type","select-one"),Object.keys(localStorage).forEach((e=>{let t=document.createElement("option");t.textContent=e,u.add(t)})),u.value=n,p.setAttribute("type","button"),p.textContent="Save",p.addEventListener("click",(()=>{console.log(`now we create a todo using these params (${i.value} ${n} ${l.value})`);let e=v(i.value,n,l.value,o,s.value,d.value),t={title:u.value,list:JSON.parse(localStorage.getItem(u.value))};console.log(`updatedTodo title ${e.title} currProjName ${e.currProjectName} desc ${e.description}`),u.value!==n?function(e,t){let n={title:e.currProjectName,list:JSON.parse(localStorage.getItem(e.currProjectName))};console.log(`I'm about to delete from oldproject ${n.title}`),g(e,n),y(e,t)}(e,t):function(e){console.log(`editTodo (${e.title},${e.currProjectName},${e.description},${e.index})`);let t=JSON.parse(localStorage.getItem(e.currProjectName)).slice(),n=e.index;t[n].title=e.title,t[n].description=e.description,t[n].dueDate=e.dueDate,t[n].priority=e.priority,t[n].currProjectName=e.currProjectName,h({title:e.currProjectName,list:t})}(e),I(n)})),m.setAttribute("type","button"),m.textContent="Delete",m.addEventListener("click",(()=>{g(v("",n,"",o),{title:n,list:JSON.parse(localStorage.getItem(n))}),I(n)})),c.appendChild(i),c.appendChild(l),c.appendChild(s),c.appendChild(d),c.appendChild(u),c.appendChild(p),c.appendChild(m);const b=document.createElement("li");b.appendChild(c),a.replaceChild(b,e)}(e,t,n,o)})),console.log(e),e}function I(e){console.log(`i'm in the display Proj function and projTitle is ${e}`);let t=JSON.parse(localStorage.getItem(e)).slice();document.querySelector(".projnamespan").textContent="",document.querySelector(".projnamespan").textContent=e,document.querySelector(".todos").textContent="";const n=document.querySelector(".todos");for(let o=0;o<t.length;o++){const r=document.createElement("li"),a=document.createElement("span"),c=document.createElement("span"),i=document.createElement("span");a.textContent=t[o].title,c.textContent=t[o].description,i.textContent=": ",r.appendChild(a),r.appendChild(i),r.appendChild(c);const l=b(r,a,e,o);n.appendChild(l)}}function x(){const e=document.querySelector(".projlist");e.innerHTML="",Object.keys(localStorage).forEach((t=>{const n=document.createElement("li");n.textContent=t,n.addEventListener("click",(()=>{I(t)})),e.appendChild(n)}))}f.styleTagTransform=m(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),t()(A.A,f),A.A&&A.A.locals&&A.A.locals,C("Inbox"),function(){const e=document.querySelector(".addtodo"),t=document.querySelector("#name");e.addEventListener("click",(()=>{const e=document.querySelector(".projnamespan");console.log(`listen function ${e.textContent}`);const n={title:e.textContent,list:JSON.parse(localStorage.getItem(e.textContent)).slice()};y(v(t.value),n),t.value="",I(n.title)}))}(),function(){const e=document.querySelector(".addprojectbutt"),t=document.querySelector("#projectname");e.addEventListener("click",(()=>{C(t.value),t.value=""}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,